/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package computationalintelligencealgorithm;

import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.xy.XYSeries;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Jam Jahanzeb
 */
public class ComputationalIntelligenceAlgorithmUI extends javax.swing.JFrame {

    int sizeofGenerations;
    int sizeofRuns;
    int sizeOfFile;
    double[][] generationsCount;
    double[][] avggenerationsFitness;
    double[][] compareAllGenerationsCount;
    double[][] compareAllavggenerationsFitness;
    double[][] compareNNEAANDBACK;
    double[][] valuesOfY;
    boolean comparing;
    int compareIndex;
    int funtionValue;
    File theDatabaseForNN;
    int EAOrNN;
    double totalTime;

    public ComputationalIntelligenceAlgorithmUI() {
        this.comparing = false;
        this.compareIndex = 0;
        compareAllGenerationsCount = new double[10][2500];
        compareAllavggenerationsFitness = new double[10][2500];
        compareNNEAANDBACK = new double[3][2500];
        initComponents();
        theDatabaseForNN = null;
        totalTime = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox10 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        cmdExit = new javax.swing.JButton();
        tbpTabs = new javax.swing.JTabbedPane();
        jpEvolutionary = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblPair1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblPair2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblPair3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblPair4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPair5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblPair6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblPair7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblPair8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblPair9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblPair10 = new javax.swing.JLabel();
        cbbParentSelection = new javax.swing.JComboBox();
        cbbSurvivalSelection = new javax.swing.JComboBox();
        txtGenerations = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtRuns = new javax.swing.JTextField();
        pbProgression = new javax.swing.JProgressBar();
        cmdFuntion2 = new javax.swing.JButton();
        txtCurrently = new javax.swing.JLabel();
        cbbChooseFunction = new javax.swing.JComboBox();
        cbbAlgorithmType = new javax.swing.JComboBox();
        ckbGaussian = new javax.swing.JCheckBox();
        jpPSO = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtPSOGenerations = new javax.swing.JTextField();
        txtPSORuns = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        txtC1 = new javax.swing.JTextField();
        txtC2 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        txtPSOPair1 = new javax.swing.JLabel();
        txtPSOPair2 = new javax.swing.JLabel();
        txtPSOPair3 = new javax.swing.JLabel();
        txtPSOPair4 = new javax.swing.JLabel();
        txtPSOPair5 = new javax.swing.JLabel();
        txtPSOPair6 = new javax.swing.JLabel();
        txtPSOPair7 = new javax.swing.JLabel();
        txtPSOPair8 = new javax.swing.JLabel();
        txtPSOPair9 = new javax.swing.JLabel();
        txtPSOPair10 = new javax.swing.JLabel();
        cmdRunPSO = new javax.swing.JButton();
        cbbPSOFunction = new javax.swing.JComboBox();
        txtPSOCurrently = new javax.swing.JLabel();
        pbbPSOAIS = new javax.swing.JProgressBar();
        jpAIS = new javax.swing.JPanel();
        cmdAIS = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        txtAISGenerations = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtAISRuns = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        txtAISPair5 = new javax.swing.JLabel();
        txtAISPair4 = new javax.swing.JLabel();
        txtAISPair3 = new javax.swing.JLabel();
        txtAISPair2 = new javax.swing.JLabel();
        txtAISPair1 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        txtAISPair9 = new javax.swing.JLabel();
        txtAISPair10 = new javax.swing.JLabel();
        txtAISPair8 = new javax.swing.JLabel();
        txtAISPair7 = new javax.swing.JLabel();
        txtAISPair6 = new javax.swing.JLabel();
        cbbAISFunction = new javax.swing.JComboBox();
        txtAISCurrently = new javax.swing.JLabel();
        pbbAIS = new javax.swing.JProgressBar();
        txtAISSubsetS = new javax.swing.JTextField();
        txtAISSubsetR = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        cmbSubsetSelection = new javax.swing.JComboBox();
        jLabel65 = new javax.swing.JLabel();
        jpNN = new javax.swing.JPanel();
        cmdSelectFileForNN = new javax.swing.JButton();
        lblNameOfFile = new javax.swing.JLabel();
        lblEpochNumber = new javax.swing.JLabel();
        lblTimeElapsed = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmbNNTechnique = new javax.swing.JComboBox();
        cmdComputeNN = new javax.swing.JButton();
        pbTotalEpochsShow = new javax.swing.JProgressBar();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        txtLearningRate = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtEpochs = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtErrorAcceptance = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        txtNNGenerations = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtNNMutation = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtNNCrossOver = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtNoOfNeurons = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtRatio = new javax.swing.JTextField();
        cmdCompareNN = new javax.swing.JButton();
        jpBSO = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        txtBSOGen = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        txtClusters = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        txt5a = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        txt6b = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        txt6biii = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        txt6c = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        txtBSORuns = new javax.swing.JTextField();
        cbbBSOFunction = new javax.swing.JComboBox();
        cmdBSO = new javax.swing.JButton();
        pbBSO = new javax.swing.JProgressBar();
        txtBSOprogress = new javax.swing.JLabel();
        jLabel115 = new javax.swing.JLabel();
        txtBSOPair1 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        txtBSOPair2 = new javax.swing.JLabel();
        txtBSOPair3 = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        jLabel118 = new javax.swing.JLabel();
        txtBSOPair4 = new javax.swing.JLabel();
        txtBSOPair5 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        jLabel124 = new javax.swing.JLabel();
        txtBSOPair6 = new javax.swing.JLabel();
        txtBSOPair7 = new javax.swing.JLabel();
        txtBSOPair8 = new javax.swing.JLabel();
        txtBSOPair9 = new javax.swing.JLabel();
        txtBSOPair10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmdFA = new javax.swing.JButton();
        cbbFAFunction = new javax.swing.JComboBox();
        jLabel64 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        txtGenFA = new javax.swing.JTextField();
        txtRunsFA = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        txtAttractiveness = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        txtAbsorption = new javax.swing.JTextField();
        pbFA = new javax.swing.JProgressBar();
        jLabel70 = new javax.swing.JLabel();
        cbbDistance = new javax.swing.JComboBox();
        txtComputeFA = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        txtFAPair1 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        txtFAPair2 = new javax.swing.JLabel();
        txtFAPair3 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        txtFAPair4 = new javax.swing.JLabel();
        txtFAPair5 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        txtFAPair6 = new javax.swing.JLabel();
        txtFAPair7 = new javax.swing.JLabel();
        txtFAPair8 = new javax.swing.JLabel();
        txtFAPair9 = new javax.swing.JLabel();
        txtFAPair10 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        txtFAAlpha = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        cmdGravity = new javax.swing.JButton();
        txtGSAGen = new javax.swing.JTextField();
        txtGSARuns = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        txtGSAGravity = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        txtGSAAlpha = new javax.swing.JTextField();
        jLabel86 = new javax.swing.JLabel();
        txtGSAEpsilon = new javax.swing.JTextField();
        cbbGSAFunction = new javax.swing.JComboBox();
        pbGSA = new javax.swing.JProgressBar();
        txtGSAComputing = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        txtGSAPair1 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        txtGSAPair2 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        txtGSAPair3 = new javax.swing.JLabel();
        txtGSAPair4 = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        txtGSAPair5 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        txtGSAPair6 = new javax.swing.JLabel();
        txtGSAPair7 = new javax.swing.JLabel();
        txtGSAPair8 = new javax.swing.JLabel();
        txtGSAPair9 = new javax.swing.JLabel();
        txtGSAPair10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cmdVaccinate = new javax.swing.JButton();
        jLabel97 = new javax.swing.JLabel();
        txtIGOAGen = new javax.swing.JTextField();
        txtIGOARuns = new javax.swing.JTextField();
        jLabel98 = new javax.swing.JLabel();
        txtIGOAGravity = new javax.swing.JTextField();
        txtIGOAAlpha = new javax.swing.JTextField();
        txtIGOAEpsilon = new javax.swing.JTextField();
        jLabel99 = new javax.swing.JLabel();
        jLabel100 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        txtIGOAPopB = new javax.swing.JTextField();
        jLabel103 = new javax.swing.JLabel();
        txtIGOAPopC = new javax.swing.JTextField();
        cbbIGOAFunction = new javax.swing.JComboBox();
        jLabel104 = new javax.swing.JLabel();
        cmbSubsetSelection1 = new javax.swing.JComboBox();
        jLabel105 = new javax.swing.JLabel();
        jLabel106 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        jLabel108 = new javax.swing.JLabel();
        jLabel109 = new javax.swing.JLabel();
        txtIGSOPair2 = new javax.swing.JLabel();
        txtIGSOPair3 = new javax.swing.JLabel();
        txtIGSOPair4 = new javax.swing.JLabel();
        txtIGSOPair5 = new javax.swing.JLabel();
        txtIGSOPair1 = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        jLabel113 = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        txtIGSOPair7 = new javax.swing.JLabel();
        txtIGSOPair8 = new javax.swing.JLabel();
        txtIGSOPair9 = new javax.swing.JLabel();
        txtIGSOPair10 = new javax.swing.JLabel();
        txtIGSOPair6 = new javax.swing.JLabel();
        pbIGOA = new javax.swing.JProgressBar();
        txtIGOAComputing = new javax.swing.JLabel();
        jpComparison = new javax.swing.JPanel();
        ckbPSO = new javax.swing.JCheckBox();
        ckbAIS = new javax.swing.JCheckBox();
        ckbBSO = new javax.swing.JCheckBox();
        ckbEP = new javax.swing.JCheckBox();
        ckbEA = new javax.swing.JCheckBox();
        ckbFA = new javax.swing.JCheckBox();
        cmdCompareAll = new javax.swing.JButton();
        cbbSSEP = new javax.swing.JComboBox();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        cbbSSEA = new javax.swing.JComboBox();
        cbbPSEA = new javax.swing.JComboBox();
        jLabel61 = new javax.swing.JLabel();
        cbbCAFunction = new javax.swing.JComboBox();
        pgCA = new javax.swing.JProgressBar();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        txtCompareRuns = new javax.swing.JTextField();
        txtCompareGens = new javax.swing.JTextField();
        txtCompareText = new javax.swing.JLabel();
        ckbGSA = new javax.swing.JCheckBox();
        ckbIGOA = new javax.swing.JCheckBox();
        jpT1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSetValuesGottenFrom = new javax.swing.JTable();
        txtTable1Name = new javax.swing.JLabel();
        jpT2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAverageFitnessOfEachGeneration = new javax.swing.JTable();
        txtTable2Name = new javax.swing.JLabel();
        cmdGenerateGraphs = new javax.swing.JButton();

        jCheckBox10.setText("jCheckBox10");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Optimization Algorithms Toolkit");
        setResizable(false);

        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        tbpTabs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbpTabs.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jLabel1.setText("Enter the number of generations to generate:");

        lblPair1.setText("(To Be Computed)");
        lblPair1.setName("lblPair1"); // NOI18N

        jLabel2.setText("Pair 1:");

        jLabel3.setText("Pair 2:");

        lblPair2.setText("(To Be Computed)");

        jLabel4.setText("Pair 3:");

        lblPair3.setText("(To Be Computed)");

        jLabel5.setText("Pair 4:");

        lblPair4.setText("(To Be Computed)");

        jLabel6.setText("Pair 5:");

        lblPair5.setText("(To Be Computed)");

        jLabel7.setText("Pair 6:");

        lblPair6.setText("(To Be Computed)");

        jLabel8.setText("Pair 7:");

        lblPair7.setText("(To Be Computed)");

        jLabel9.setText("Pair 8:");

        lblPair8.setText("(To Be Computed)");

        jLabel10.setText("Pair 9:");

        lblPair9.setText("(To Be Computed)");

        jLabel11.setText("Pair 10:");

        lblPair10.setText("(To Be Computed)");

        cbbParentSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme", "Binary Tournament", "Uniform Stochastic" }));

        cbbSurvivalSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme", "Binary Tournament", "Truncation Method" }));

        txtGenerations.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel12.setText("Enter the number of runs for all generations:");

        txtRuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cmdFuntion2.setText("Run the Algorithms");
        cmdFuntion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFuntion2ActionPerformed(evt);
            }
        });

        txtCurrently.setText("Currently: ");

        cbbChooseFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Function 1", "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        cbbAlgorithmType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Evolutionary Programming", "Evolution Strategy", "Evolutionary Algorithms" }));

        ckbGaussian.setText("Gaussian Mutation");

        javax.swing.GroupLayout jpEvolutionaryLayout = new javax.swing.GroupLayout(jpEvolutionary);
        jpEvolutionary.setLayout(jpEvolutionaryLayout);
        jpEvolutionaryLayout.setHorizontalGroup(
            jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbProgression, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbParentSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair2))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair1))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair3))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair4))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair5)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair6))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair7))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair8))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair9))
                                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPair10))))
                                    .addComponent(cbbSurvivalSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbbChooseFunction, 0, 176, Short.MAX_VALUE)
                                    .addComponent(cmdFuntion2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbAlgorithmType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ckbGaussian)))))
                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtGenerations)
                            .addComponent(txtRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtCurrently)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jpEvolutionaryLayout.setVerticalGroup(
            jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtGenerations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtRuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbParentSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbSurvivalSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPair1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(lblPair2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblPair3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblPair4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblPair5)))
                    .addGroup(jpEvolutionaryLayout.createSequentialGroup()
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblPair6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lblPair7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(lblPair8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(lblPair9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(lblPair10))))
                .addGap(18, 18, 18)
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbChooseFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbAlgorithmType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpEvolutionaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdFuntion2)
                    .addComponent(ckbGaussian))
                .addGap(28, 28, 28)
                .addComponent(txtCurrently)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pbProgression, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        tbpTabs.addTab("Evolutionary", jpEvolutionary);
        jpEvolutionary.getAccessibleContext().setAccessibleName("tbpInformationGathering");

        jLabel13.setText("Enter the number of generations to generate:");

        jLabel14.setText("Enter the number of runs for all generations:");

        txtPSOGenerations.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtPSORuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel24.setText("The value of C1 (for exploration) :");

        jLabel25.setText("The value of C2 (for exploitation):");

        txtC1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtC2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel26.setText("Pair 1:");

        jLabel27.setText("Pair 2:");

        jLabel28.setText("Pair 3:");

        jLabel29.setText("Pair 4:");

        jLabel30.setText("Pair 6:");

        jLabel31.setText("Pair 5:");

        jLabel32.setText("Pair 8:");

        jLabel33.setText("Pair 7:");

        jLabel34.setText("Pair 10:");

        jLabel35.setText("Pair 9:");

        txtPSOPair1.setText("(To be Computed)");

        txtPSOPair2.setText("(To be Computed)");

        txtPSOPair3.setText("(To be Computed)");

        txtPSOPair4.setText("(To be Computed)");

        txtPSOPair5.setText("(To be Computed)");

        txtPSOPair6.setText("(To be Computed)");

        txtPSOPair7.setText("(To be Computed)");

        txtPSOPair8.setText("(To be Computed)");

        txtPSOPair9.setText("(To be Computed)");

        txtPSOPair10.setText("(To be Computed)");

        cmdRunPSO.setText("Let the swarm move");
        cmdRunPSO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRunPSOActionPerformed(evt);
            }
        });

        cbbPSOFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        txtPSOCurrently.setText("Currently computing: N/A");

        javax.swing.GroupLayout jpPSOLayout = new javax.swing.GroupLayout(jpPSO);
        jpPSO.setLayout(jpPSOLayout);
        jpPSOLayout.setHorizontalGroup(
            jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPSOLayout.createSequentialGroup()
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpPSOLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jpPSOLayout.createSequentialGroup()
                                    .addComponent(jLabel24)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtC1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jpPSOLayout.createSequentialGroup()
                                    .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel14))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtPSOGenerations, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                        .addComponent(txtPSORuns)))
                                .addGroup(jpPSOLayout.createSequentialGroup()
                                    .addComponent(jLabel25)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtC2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jpPSOLayout.createSequentialGroup()
                                    .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel27)
                                        .addComponent(jLabel26)
                                        .addComponent(jLabel28)
                                        .addComponent(jLabel29)
                                        .addComponent(jLabel31))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPSOPair1)
                                        .addComponent(txtPSOPair2)
                                        .addComponent(txtPSOPair3)
                                        .addComponent(txtPSOPair4)
                                        .addComponent(txtPSOPair5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpPSOLayout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPSOPair6))
                                    .addGroup(jpPSOLayout.createSequentialGroup()
                                        .addComponent(jLabel33)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPSOPair7))
                                    .addGroup(jpPSOLayout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPSOPair8))
                                    .addGroup(jpPSOLayout.createSequentialGroup()
                                        .addComponent(jLabel35)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPSOPair9))
                                    .addGroup(jpPSOLayout.createSequentialGroup()
                                        .addComponent(jLabel34)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPSOPair10)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPSOLayout.createSequentialGroup()
                                    .addComponent(cmdRunPSO)
                                    .addGap(55, 55, 55)
                                    .addComponent(cbbPSOFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(9, 9, 9)))))
                    .addGroup(jpPSOLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtPSOCurrently)))
                .addContainerGap(55, Short.MAX_VALUE))
            .addComponent(pbbPSOAIS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpPSOLayout.setVerticalGroup(
            jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPSOLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtPSOGenerations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtPSORuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(txtC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpPSOLayout.createSequentialGroup()
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(txtPSOPair6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(txtPSOPair7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(txtPSOPair8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(txtPSOPair9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(txtPSOPair10)))
                    .addGroup(jpPSOLayout.createSequentialGroup()
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(txtPSOPair1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(txtPSOPair2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(txtPSOPair3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(txtPSOPair4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(txtPSOPair5))))
                .addGap(32, 32, 32)
                .addGroup(jpPSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbPSOFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdRunPSO))
                .addGap(41, 41, 41)
                .addComponent(txtPSOCurrently)
                .addGap(18, 18, 18)
                .addComponent(pbbPSOAIS, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        tbpTabs.addTab("Partical Swarm Optimization", jpPSO);

        cmdAIS.setText("Generate Immunes");
        cmdAIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAISActionPerformed(evt);
            }
        });

        jLabel36.setText("Enter the number of generations to generate:");

        txtAISGenerations.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel37.setText("Enter the number of runs for all generations:");

        txtAISRuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel38.setText("Pair 1:");

        jLabel39.setText("Pair 2:");

        jLabel40.setText("Pair 3:");

        jLabel41.setText("Pair 4:");

        jLabel42.setText("Pair 5:");

        txtAISPair5.setText("(To be Computed)");

        txtAISPair4.setText("(To be Computed)");

        txtAISPair3.setText("(To be Computed)");

        txtAISPair2.setText("(To be Computed)");

        txtAISPair1.setText("(To be Computed)");

        jLabel43.setText("Pair 6:");

        jLabel44.setText("Pair 7:");

        jLabel45.setText("Pair 8:");

        jLabel46.setText("Pair 9:");

        jLabel47.setText("Pair 10:");

        txtAISPair9.setText("(To be Computed)");

        txtAISPair10.setText("(To be Computed)");

        txtAISPair8.setText("(To be Computed)");

        txtAISPair7.setText("(To be Computed)");

        txtAISPair6.setText("(To be Computed)");

        cbbAISFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        txtAISCurrently.setText("Currently computing: N/A");

        txtAISSubsetS.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtAISSubsetR.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel48.setText("Enter the size of Subset S:");

        jLabel49.setText("Enter the size of Subset R:");

        cmbSubsetSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme" }));

        jLabel65.setText("Subset S and Subset R selection using:");

        javax.swing.GroupLayout jpAISLayout = new javax.swing.GroupLayout(jpAIS);
        jpAIS.setLayout(jpAISLayout);
        jpAISLayout.setHorizontalGroup(
            jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbbAIS, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpAISLayout.createSequentialGroup()
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAISLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtAISCurrently))
                    .addGroup(jpAISLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpAISLayout.createSequentialGroup()
                                .addComponent(jLabel48)
                                .addGap(3, 3, 3)
                                .addComponent(txtAISSubsetS, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel49)
                                .addGap(4, 4, 4)
                                .addComponent(txtAISSubsetR, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpAISLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel65)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSubsetSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpAISLayout.createSequentialGroup()
                                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpAISLayout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(cmdAIS))
                                    .addGroup(jpAISLayout.createSequentialGroup()
                                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel39)
                                            .addComponent(jLabel38)
                                            .addComponent(jLabel40)
                                            .addComponent(jLabel41)
                                            .addComponent(jLabel42))
                                        .addGap(5, 5, 5)
                                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtAISPair1)
                                            .addComponent(txtAISPair2)
                                            .addComponent(txtAISPair3)
                                            .addComponent(txtAISPair4)
                                            .addComponent(txtAISPair5))))
                                .addGap(38, 38, 38)
                                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpAISLayout.createSequentialGroup()
                                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel43)
                                            .addComponent(jLabel44)
                                            .addComponent(jLabel45)
                                            .addComponent(jLabel46)
                                            .addComponent(jLabel47))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtAISPair6)
                                            .addComponent(txtAISPair7)
                                            .addComponent(txtAISPair8)
                                            .addGroup(jpAISLayout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtAISPair9)
                                                    .addComponent(txtAISPair10)))))
                                    .addComponent(cbbAISFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jpAISLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAISGenerations)
                            .addComponent(txtAISRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jpAISLayout.setVerticalGroup(
            jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAISLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtAISGenerations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(txtAISRuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAISSubsetS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48)
                    .addComponent(txtAISSubsetR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubsetSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel65))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAISLayout.createSequentialGroup()
                        .addComponent(txtAISPair1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAISPair2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAISPair3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAISPair4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAISPair5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAISLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAISLayout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAISLayout.createSequentialGroup()
                        .addComponent(txtAISPair9)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAISLayout.createSequentialGroup()
                        .addComponent(txtAISPair6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAISPair7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAISPair8)
                        .addGap(28, 28, 28)
                        .addComponent(txtAISPair10)))
                .addGap(27, 27, 27)
                .addGroup(jpAISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbAISFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdAIS))
                .addGap(18, 18, 18)
                .addComponent(txtAISCurrently)
                .addGap(18, 18, 18)
                .addComponent(pbbAIS, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        tbpTabs.addTab("Aritificial Immune System", jpAIS);

        cmdSelectFileForNN.setText("Select File");
        cmdSelectFileForNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectFileForNNActionPerformed(evt);
            }
        });

        lblNameOfFile.setText("(To Be Entered)");

        lblEpochNumber.setText("-------------------------------------------------------------------------");

        lblTimeElapsed.setText("Time elapsed: N/A");

        jLabel15.setText("Using Technique:");

        cmbNNTechnique.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Backpropagation", "Evolutionary Neural Network" }));

        cmdComputeNN.setText("Compute");
        cmdComputeNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdComputeNNActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Back Propagation information"));

        jLabel17.setText("Total Epoch:");

        txtLearningRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel18.setText("Learning Rate:");

        txtEpochs.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel19.setText("Error acceptance:");

        txtErrorAcceptance.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtLearningRate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtEpochs, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtErrorAcceptance, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtEpochs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(txtErrorAcceptance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolutionary information"));

        jLabel20.setText("Number of Generations:");

        txtNNGenerations.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel22.setText("Mutation Allowed:");

        txtNNMutation.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel23.setText("Cross Over at:");

        txtNNCrossOver.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNNGenerations, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNNMutation, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNNCrossOver, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtNNGenerations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(txtNNMutation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtNNCrossOver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel16.setText("Neurons in hidden layer:");

        txtNoOfNeurons.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel21.setText("Training data ratio:");

        txtRatio.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cmdCompareNN.setText("Compare");
        cmdCompareNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCompareNNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpNNLayout = new javax.swing.GroupLayout(jpNN);
        jpNN.setLayout(jpNNLayout);
        jpNNLayout.setHorizontalGroup(
            jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbTotalEpochsShow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpNNLayout.createSequentialGroup()
                .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpNNLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpNNLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(cmdSelectFileForNN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNameOfFile))
                    .addGroup(jpNNLayout.createSequentialGroup()
                        .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpNNLayout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(jLabel16)
                                .addGap(6, 6, 6)
                                .addComponent(txtNoOfNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel21))
                            .addGroup(jpNNLayout.createSequentialGroup()
                                .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpNNLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEpochNumber)
                                            .addComponent(lblTimeElapsed)))
                                    .addGroup(jpNNLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbNNTechnique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(10, 10, 10)
                                .addComponent(cmdComputeNN)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdCompareNN)
                            .addComponent(txtRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpNNLayout.setVerticalGroup(
            jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpNNLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtNoOfNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(txtRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdSelectFileForNN)
                    .addComponent(lblNameOfFile))
                .addGap(18, 18, 18)
                .addGroup(jpNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(cmbNNTechnique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdComputeNN)
                    .addComponent(cmdCompareNN))
                .addGap(18, 18, 18)
                .addComponent(lblTimeElapsed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEpochNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbTotalEpochsShow, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tbpTabs.addTab("Neural Network", jpNN);

        jLabel50.setText("Enter total generations/iterations:");

        txtBSOGen.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel51.setText("Total clusters:");

        txtClusters.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel57.setText("Cluster center replacement probability:");

        txt5a.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel58.setText("Exploitation probability:");

        txt6b.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel59.setText("Cluster center selection probability:");

        txt6biii.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel60.setText("Cluster center combination probability:");

        txt6c.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel67.setText("Total number of runs:");

        txtBSORuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cbbBSOFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        cmdBSO.setText("Find the best idea");
        cmdBSO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBSOActionPerformed(evt);
            }
        });

        txtBSOprogress.setText("Currently: N/A");

        jLabel115.setText("Pair 1:");

        txtBSOPair1.setText("(To be Computed)");

        jLabel116.setText("Pair 2:");

        txtBSOPair2.setText("(To be Computed)");

        txtBSOPair3.setText("(To be Computed)");

        jLabel117.setText("Pair 3:");

        jLabel118.setText("Pair 4:");

        txtBSOPair4.setText("(To be Computed)");

        txtBSOPair5.setText("(To be Computed)");

        jLabel119.setText("Pair 5:");

        jLabel120.setText("Pair 10:");

        jLabel121.setText("Pair 9:");

        jLabel122.setText("Pair 8:");

        jLabel123.setText("Pair 7:");

        jLabel124.setText("Pair 6:");

        txtBSOPair6.setText("(To be Computed)");

        txtBSOPair7.setText("(To be Computed)");

        txtBSOPair8.setText("(To be Computed)");

        txtBSOPair9.setText("(To be Computed)");

        txtBSOPair10.setText("(To be Computed)");

        javax.swing.GroupLayout jpBSOLayout = new javax.swing.GroupLayout(jpBSO);
        jpBSO.setLayout(jpBSOLayout);
        jpBSOLayout.setHorizontalGroup(
            jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbBSO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpBSOLayout.createSequentialGroup()
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(txtBSOprogress))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel51)
                            .addComponent(jLabel50))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpBSOLayout.createSequentialGroup()
                                .addComponent(txtClusters, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addComponent(jLabel58)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt6b, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpBSOLayout.createSequentialGroup()
                                .addComponent(txtBSOGen, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel67)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBSORuns, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBSOLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbbBSOFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmdBSO)
                .addGap(117, 117, 117))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBSOLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(jLabel59)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt6biii, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(jLabel57)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt5a, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(jLabel60)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt6c, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(105, 105, 105))
            .addGroup(jpBSOLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel116)
                            .addComponent(jLabel115)
                            .addComponent(jLabel117)
                            .addComponent(jLabel118)
                            .addComponent(jLabel119))
                        .addGap(5, 5, 5)
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBSOPair1)
                            .addComponent(txtBSOPair2)
                            .addComponent(txtBSOPair3)
                            .addComponent(txtBSOPair4)
                            .addComponent(txtBSOPair5)))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel124)
                            .addComponent(jLabel123)
                            .addComponent(jLabel122)
                            .addComponent(jLabel121)
                            .addComponent(jLabel120))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBSOPair6)
                            .addComponent(txtBSOPair7)
                            .addComponent(txtBSOPair8)
                            .addGroup(jpBSOLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBSOPair9)
                                    .addComponent(txtBSOPair10))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpBSOLayout.setVerticalGroup(
            jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBSOLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel67)
                        .addComponent(txtBSORuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel50)
                        .addComponent(txtBSOGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(txtClusters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58)
                    .addComponent(txt6b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel57)
                    .addComponent(txt5a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel59)
                    .addComponent(txt6biii, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60)
                    .addComponent(txt6c, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(jLabel124)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel123)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel122)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel121)
                            .addComponent(txtBSOPair9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel120))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(txtBSOPair1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBSOPair2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBSOPair3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBSOPair4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBSOPair5))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(txtBSOPair6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBSOPair7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBSOPair8)
                        .addGap(28, 28, 28)
                        .addComponent(txtBSOPair10))
                    .addGroup(jpBSOLayout.createSequentialGroup()
                        .addComponent(jLabel115)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel116)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel117)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel118)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel119)))
                .addGap(18, 18, 18)
                .addGroup(jpBSOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdBSO)
                    .addComponent(cbbBSOFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(txtBSOprogress)
                .addGap(27, 27, 27)
                .addComponent(pbBSO, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tbpTabs.addTab("Brain Storming Optimization", jpBSO);

        cmdFA.setText("Get closer to others");
        cmdFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFAActionPerformed(evt);
            }
        });

        cbbFAFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        jLabel64.setText("Total generations:");

        jLabel66.setText("Total runs:");

        txtGenFA.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtRunsFA.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel68.setText("Maximum attractiveness:");

        txtAttractiveness.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel69.setText("Absorption coefficient:");

        txtAbsorption.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel70.setText("Distance computation technique:");

        cbbDistance.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Euclidean Distance", "Manhattan Distance" }));

        txtComputeFA.setText("Currently computing: N/A");

        jLabel71.setText("Pair 1:");

        txtFAPair1.setText("(To be Computed)");

        jLabel72.setText("Pair 2:");

        txtFAPair2.setText("(To be Computed)");

        txtFAPair3.setText("(To be Computed)");

        jLabel73.setText("Pair 3:");

        jLabel74.setText("Pair 4:");

        txtFAPair4.setText("(To be Computed)");

        txtFAPair5.setText("(To be Computed)");

        jLabel75.setText("Pair 5:");

        jLabel76.setText("Pair 10:");

        jLabel77.setText("Pair 9:");

        jLabel78.setText("Pair 8:");

        jLabel79.setText("Pair 7:");

        jLabel80.setText("Pair 6:");

        txtFAPair6.setText("(To be Computed)");

        txtFAPair7.setText("(To be Computed)");

        txtFAPair8.setText("(To be Computed)");

        txtFAPair9.setText("(To be Computed)");

        txtFAPair10.setText("(To be Computed)");

        jLabel81.setText("Value for alpha:");

        txtFAAlpha.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbFA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel68)
                                    .addComponent(jLabel64)
                                    .addComponent(jLabel81))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtGenFA)
                                    .addComponent(txtAttractiveness, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(txtFAAlpha))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel66, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel69, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRunsFA, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAbsorption, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel72)
                                    .addComponent(jLabel71)
                                    .addComponent(jLabel73)
                                    .addComponent(jLabel74)
                                    .addComponent(jLabel75))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFAPair1)
                                    .addComponent(txtFAPair2)
                                    .addComponent(txtFAPair3)
                                    .addComponent(txtFAPair4)
                                    .addComponent(txtFAPair5)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel70)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbbDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtComputeFA))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(cmdFA)
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel80)
                                    .addComponent(jLabel79)
                                    .addComponent(jLabel78)
                                    .addComponent(jLabel77)
                                    .addComponent(jLabel76))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFAPair6)
                                    .addComponent(txtFAPair7)
                                    .addComponent(txtFAPair8)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtFAPair9)
                                            .addComponent(txtFAPair10)))))
                            .addComponent(cbbFAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(txtGenFA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel66)
                    .addComponent(txtRunsFA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel68)
                    .addComponent(txtAttractiveness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel69)
                    .addComponent(txtAbsorption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel81)
                    .addComponent(txtFAAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel70)
                    .addComponent(cbbDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel80)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel79)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel78)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel77)
                            .addComponent(txtFAPair9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel76))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtFAPair1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAPair2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAPair3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAPair4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAPair5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtFAPair6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAPair7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFAPair8)
                        .addGap(28, 28, 28)
                        .addComponent(txtFAPair10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel71)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel72)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel73)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel74)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel75)))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdFA)
                    .addComponent(cbbFAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtComputeFA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbFA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        tbpTabs.addTab("Firefly Algorithm", jPanel2);

        jLabel82.setText("Enter number of generations:");

        jLabel83.setText("Enter number of runs:");

        cmdGravity.setText("Find gravitational pull");
        cmdGravity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGravityActionPerformed(evt);
            }
        });

        txtGSAGen.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtGSARuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel84.setText("Gravitational constant:");

        txtGSAGravity.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel85.setText("Value of Alpha:");

        txtGSAAlpha.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel86.setText("Value of Epsilon:");

        txtGSAEpsilon.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cbbGSAFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        txtGSAComputing.setText("Currently computing: N/A");

        jLabel87.setText("Pair 1:");

        txtGSAPair1.setText("(To be Computed)");

        jLabel88.setText("Pair 2:");

        txtGSAPair2.setText("(To be Computed)");

        jLabel89.setText("Pair 3:");

        txtGSAPair3.setText("(To be Computed)");

        txtGSAPair4.setText("(To be Computed)");

        jLabel90.setText("Pair 4:");

        jLabel91.setText("Pair 5:");

        txtGSAPair5.setText("(To be Computed)");

        jLabel92.setText("Pair 10:");

        jLabel93.setText("Pair 9:");

        jLabel94.setText("Pair 8:");

        jLabel95.setText("Pair 7:");

        jLabel96.setText("Pair 6:");

        txtGSAPair6.setText("(To be Computed)");

        txtGSAPair7.setText("(To be Computed)");

        txtGSAPair8.setText("(To be Computed)");

        txtGSAPair9.setText("(To be Computed)");

        txtGSAPair10.setText("(To be Computed)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbGSA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(cmdGravity))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel82)
                                    .addComponent(jLabel83))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGSAGen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGSARuns, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel85)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGSAAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel84)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGSAGravity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbbGSAFunction, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel96)
                                    .addComponent(jLabel95)
                                    .addComponent(jLabel94)
                                    .addComponent(jLabel93)
                                    .addComponent(jLabel92))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGSAPair6)
                                    .addComponent(txtGSAPair7)
                                    .addComponent(txtGSAPair8)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtGSAPair9)
                                            .addComponent(txtGSAPair10)))))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtGSAComputing))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel88)
                            .addComponent(jLabel87)
                            .addComponent(jLabel89)
                            .addComponent(jLabel90)
                            .addComponent(jLabel91))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGSAPair1)
                            .addComponent(txtGSAPair2)
                            .addComponent(txtGSAPair3)
                            .addComponent(txtGSAPair4)
                            .addComponent(txtGSAPair5))))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel86)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGSAEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(172, 172, 172))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel82)
                            .addComponent(txtGSAGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel83)
                            .addComponent(txtGSARuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel84)
                            .addComponent(txtGSAGravity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel85)
                            .addComponent(txtGSAAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel86)
                    .addComponent(txtGSAEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(txtGSAPair1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtGSAPair2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtGSAPair3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtGSAPair4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtGSAPair5))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel87)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel88)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel89)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel90)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel91)))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel96)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel95)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel94)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel93)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel92))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(txtGSAPair9)
                            .addGap(22, 22, 22))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(txtGSAPair6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtGSAPair7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtGSAPair8)
                            .addGap(28, 28, 28)
                            .addComponent(txtGSAPair10))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdGravity)
                    .addComponent(cbbGSAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(txtGSAComputing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pbGSA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        tbpTabs.addTab("Gravitational Search Algorithm", jPanel4);

        cmdVaccinate.setText("Vaccinate");
        cmdVaccinate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdVaccinateActionPerformed(evt);
            }
        });

        jLabel97.setText("Enter number of generations:");

        txtIGOAGen.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtIGOARuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel98.setText("Enter number of runs:");

        txtIGOAGravity.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtIGOAAlpha.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtIGOAEpsilon.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel99.setText("Value of Epsilon:");

        jLabel100.setText("Value of Alpha:");

        jLabel101.setText("Gravitational constant:");

        jLabel102.setText("Population B size:");

        txtIGOAPopB.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel103.setText("Population C size:");

        txtIGOAPopC.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        cbbIGOAFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        jLabel104.setText("Population B and Population C selection using:");

        cmbSubsetSelection1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme" }));

        jLabel105.setText("Pair 3:");

        jLabel106.setText("Pair 4:");

        jLabel107.setText("Pair 5:");

        jLabel108.setText("Pair 2:");

        jLabel109.setText("Pair 1:");

        txtIGSOPair2.setText("(To be Computed)");

        txtIGSOPair3.setText("(To be Computed)");

        txtIGSOPair4.setText("(To be Computed)");

        txtIGSOPair5.setText("(To be Computed)");

        txtIGSOPair1.setText("(To be Computed)");

        jLabel110.setText("Pair 10:");

        jLabel111.setText("Pair 9:");

        jLabel112.setText("Pair 8:");

        jLabel113.setText("Pair 7:");

        jLabel114.setText("Pair 6:");

        txtIGSOPair7.setText("(To be Computed)");

        txtIGSOPair8.setText("(To be Computed)");

        txtIGSOPair9.setText("(To be Computed)");

        txtIGSOPair10.setText("(To be Computed)");

        txtIGSOPair6.setText("(To be Computed)");

        txtIGOAComputing.setText("Currently computing: N/A");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pbIGOA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel98)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGOARuns, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(75, 75, 75)
                                    .addComponent(cmdVaccinate))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel97)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtIGOAGen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel101)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtIGOAGravity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel99)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtIGOAEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbbIGOAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel100)
                        .addGap(6, 6, 6)
                        .addComponent(txtIGOAAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel102)
                        .addGap(3, 3, 3)
                        .addComponent(txtIGOAPopB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel103)
                        .addGap(4, 4, 4)
                        .addComponent(txtIGOAPopC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel104)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSubsetSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtIGOAComputing)))
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGap(212, 212, 212)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel114)
                                .addComponent(jLabel113)
                                .addComponent(jLabel112)
                                .addComponent(jLabel111)
                                .addComponent(jLabel110))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtIGSOPair6)
                                .addComponent(txtIGSOPair7)
                                .addComponent(txtIGSOPair8)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtIGSOPair9)
                                        .addComponent(txtIGSOPair10)))))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel108)
                                .addComponent(jLabel109)
                                .addComponent(jLabel105)
                                .addComponent(jLabel106)
                                .addComponent(jLabel107))
                            .addGap(5, 5, 5)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtIGSOPair1)
                                .addComponent(txtIGSOPair2)
                                .addComponent(txtIGSOPair3)
                                .addComponent(txtIGSOPair4)
                                .addComponent(txtIGSOPair5))))
                    .addContainerGap(76, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel97)
                    .addComponent(txtIGOAGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel101)
                    .addComponent(txtIGOAGravity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel98)
                        .addComponent(txtIGOARuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtIGOAEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel99))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel100)
                    .addComponent(txtIGOAAlpha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIGOAPopB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel102)
                    .addComponent(txtIGOAPopC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel103))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubsetSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel104))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdVaccinate)
                    .addComponent(cbbIGOAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(txtIGOAComputing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbIGOA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(165, 165, 165)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(txtIGSOPair1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGSOPair2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGSOPair3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGSOPair4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGSOPair5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel109)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel108)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel105)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel106)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel107)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel114)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel113)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel112)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel111)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel110))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(txtIGSOPair9)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(txtIGSOPair6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGSOPair7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIGSOPair8)
                                .addGap(28, 28, 28)
                                .addComponent(txtIGSOPair10))))
                    .addContainerGap(166, Short.MAX_VALUE)))
        );

        tbpTabs.addTab("Immune Gravitation Inspired", jPanel5);

        ckbPSO.setText("Partical Swarm Optimization");

        ckbAIS.setText("Artificial Immune System");

        ckbBSO.setText("Brain Storming Optimization");

        ckbEP.setText("Evolutionary Programming");

        ckbEA.setText("Evolutionary Algorithms");

        ckbFA.setText("Firefly Algorithm");

        cmdCompareAll.setText("Compare all selected");
        cmdCompareAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCompareAllActionPerformed(evt);
            }
        });

        cbbSSEP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme", "Binary Tournament", "Truncation Method" }));
        cbbSSEP.setSelectedIndex(2);

        jLabel52.setText("Survival selection scheme:");

        jLabel53.setText("Parent selection scheme:");

        jLabel54.setText("Survival selection scheme:");

        cbbSSEA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme", "Binary Tournament", "Truncation Method" }));
        cbbSSEA.setSelectedIndex(3);

        cbbPSEA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fitness Proportion Scheme", "Rank Based Scheme", "Binary Tournament", "Uniform Stochastic" }));
        cbbPSEA.setSelectedIndex(1);

        jLabel61.setText("Select function:");

        cbbCAFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rosenbrock function", "Himmelblau's function", "Rastrigin function", "Six-hump Camel function" }));

        jLabel62.setText("Total generations:");

        jLabel63.setText("Total runs:");

        txtCompareRuns.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCompareGens.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCompareText.setText("-----------------------------");

        ckbGSA.setText("Gravitational Search Algorithm");

        ckbIGOA.setText("Immune Gravitation Inspired");

        javax.swing.GroupLayout jpComparisonLayout = new javax.swing.GroupLayout(jpComparison);
        jpComparison.setLayout(jpComparisonLayout);
        jpComparisonLayout.setHorizontalGroup(
            jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pgCA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpComparisonLayout.createSequentialGroup()
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpComparisonLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel62)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCompareGens, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpComparisonLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel63)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCompareRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(163, Short.MAX_VALUE))
            .addGroup(jpComparisonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpComparisonLayout.createSequentialGroup()
                        .addComponent(jLabel61)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbCAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(cmdCompareAll)
                        .addGap(37, 37, 37))
                    .addGroup(jpComparisonLayout.createSequentialGroup()
                        .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckbPSO)
                            .addComponent(ckbBSO))
                        .addGap(65, 65, 65)
                        .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpComparisonLayout.createSequentialGroup()
                                .addComponent(ckbFA)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jpComparisonLayout.createSequentialGroup()
                                .addComponent(ckbAIS)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jpComparisonLayout.createSequentialGroup()
                        .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpComparisonLayout.createSequentialGroup()
                                    .addGap(93, 93, 93)
                                    .addComponent(jLabel52)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbbSSEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(ckbEP))
                            .addGroup(jpComparisonLayout.createSequentialGroup()
                                .addComponent(ckbGSA)
                                .addGap(54, 54, 54)
                                .addComponent(ckbIGOA))
                            .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpComparisonLayout.createSequentialGroup()
                                    .addGap(93, 93, 93)
                                    .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jpComparisonLayout.createSequentialGroup()
                                            .addComponent(jLabel53)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbbPSEA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jpComparisonLayout.createSequentialGroup()
                                            .addComponent(jLabel54)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbbSSEA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jpComparisonLayout.createSequentialGroup()
                                    .addComponent(ckbEA)
                                    .addGap(241, 241, 241)))
                            .addComponent(txtCompareText))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jpComparisonLayout.setVerticalGroup(
            jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpComparisonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbPSO)
                    .addComponent(ckbAIS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbBSO)
                    .addComponent(ckbFA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbGSA)
                    .addComponent(ckbIGOA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(ckbEP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(cbbSSEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ckbEA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(cbbPSEA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(cbbSSEA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel63)
                    .addComponent(txtCompareRuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel62)
                    .addComponent(txtCompareGens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61)
                    .addComponent(cbbCAFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdCompareAll))
                .addGap(16, 16, 16)
                .addComponent(txtCompareText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgCA, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tbpTabs.addTab("Comparison", jpComparison);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tblSetValuesGottenFrom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblSetValuesGottenFrom.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tblSetValuesGottenFrom);

        txtTable1Name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        javax.swing.GroupLayout jpT1Layout = new javax.swing.GroupLayout(jpT1);
        jpT1.setLayout(jpT1Layout);
        jpT1Layout.setHorizontalGroup(
            jpT1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
            .addGroup(jpT1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTable1Name)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpT1Layout.setVerticalGroup(
            jpT1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpT1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTable1Name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addContainerGap())
        );

        tbpTabs.addTab("Table 1", jpT1);
        jpT1.getAccessibleContext().setAccessibleName("tbpSelectProcedures");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tableAverageFitnessOfEachGeneration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableAverageFitnessOfEachGeneration.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tableAverageFitnessOfEachGeneration);

        txtTable2Name.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        javax.swing.GroupLayout jpT2Layout = new javax.swing.GroupLayout(jpT2);
        jpT2.setLayout(jpT2Layout);
        jpT2Layout.setHorizontalGroup(
            jpT2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
            .addGroup(jpT2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTable2Name)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpT2Layout.setVerticalGroup(
            jpT2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpT2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTable2Name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tbpTabs.addTab("Table 2", jpT2);
        jpT2.getAccessibleContext().setAccessibleName("tbpGraphs");

        cmdGenerateGraphs.setText("Generate the Graphs");
        cmdGenerateGraphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateGraphsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpTabs)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmdGenerateGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdExit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(tbpTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdExit)
                    .addComponent(cmdGenerateGraphs))
                .addContainerGap())
        );

        tbpTabs.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Information Gathering");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cmdExitActionPerformed

    public static double getARandomNumberBetween(int minimumValue, int maximumValue) {

        // NOTE: Usually this should be a field rather than a method variable so that it is not re-seeded every call.
        Random randomNumber = new Random();
        int newRandomNumber = randomNumber.nextInt((maximumValue - minimumValue) + 1) + minimumValue;

        return newRandomNumber;
    }

    private void cmdGenerateGraphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateGraphsActionPerformed

        double lowerDomain = 50000000;
        double upperDomain = -50000000;

        if (EAOrNN > 1) {

            String name2;
            String name1;

            if (EAOrNN == 3) {
                name2 = "The Final Global best of the run";
                name1 = "The Average Global best of the run";
            } else if (EAOrNN == 5) {
                name2 = "Last value calculated for each iteration";
                name1 = "The average best-so-far of all individuals";
            } else if (EAOrNN == 6) {
                name2 = "Last value calculated for each iteration";
                name1 = "The average best-so-far of all Fireflies";
            } else {
                name2 = "Last value calculated for each run";
                name1 = "The average best-so-far of each generation";
            }

            XYSeries series1 = new XYSeries(name1);
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                series1.add(i, (temp / sizeofRuns));

                if ((temp / sizeofRuns) > upperDomain) {
                    upperDomain = (temp / sizeofRuns);
                } else if ((temp / sizeofRuns) < lowerDomain) {
                    lowerDomain = (temp / sizeofRuns);
                }
            }
            boolean series1Shape = false;
            boolean series1Line = true;

            LineAtrributes lineSeries1 = new LineAtrributes(series1, series1Line, series1Shape);

            XYSeries series2 = new XYSeries("The average fitness of each generation");
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                series2.add(i, (temp / sizeofRuns));

                if ((temp / sizeofRuns) > upperDomain) {
                    upperDomain = (temp / sizeofRuns);
                } else if ((temp / sizeofRuns) < lowerDomain) {
                    lowerDomain = (temp / sizeofRuns);
                }
            }
            boolean series2Shape = false;
            boolean series2Line = true;

            LineAtrributes lineSeries2 = new LineAtrributes(series2, series2Line, series2Shape);

            XYSeries series3 = new XYSeries(name2);
            for (int j = 0; j < sizeofRuns; j++) {
                series3.add(j, generationsCount[j][sizeofGenerations - 1]);
                if ((generationsCount[j][sizeofGenerations - 1]) > upperDomain) {
                    upperDomain = (generationsCount[j][sizeofGenerations - 1]);
                } else if ((generationsCount[j][sizeofGenerations - 1]) < lowerDomain) {
                    lowerDomain = (generationsCount[j][sizeofGenerations - 1]);
                }
            }

            boolean series3Shape = true;
            boolean series3Line = false;

            LineAtrributes lineSeries3 = new LineAtrributes(series3, series3Line, series3Shape);

            LinkedList<LineAtrributes> listOfSeriesToAdd = new LinkedList<>();
            listOfSeriesToAdd.add(lineSeries3);
            listOfSeriesToAdd.add(lineSeries1);
            listOfSeriesToAdd.add(lineSeries2);

            LinkedList<String> nameOfAll = new LinkedList<>();

            if (EAOrNN == 2) {
                if (cbbAlgorithmType.getSelectedIndex() == 2) {
                    String parentType = cbbParentSelection.getSelectedItem().toString();
                    String survivalType = cbbSurvivalSelection.getSelectedItem().toString();
                    nameOfAll.add("Evolutionary Algorithms: " + parentType + " and " + survivalType);
                } else {
                    String type = cbbAlgorithmType.getSelectedItem().toString();
                    nameOfAll.add(type);
                }
            } else if (EAOrNN == 3) {
                nameOfAll.add("Particle Swarm Optimization");
            } else if (EAOrNN == 5) {
                nameOfAll.add("Brain Storming Optimization");
            } else if (EAOrNN == 6) {
                nameOfAll.add("Firefly Algorithm");
            } else if(EAOrNN== 7) {
                nameOfAll.add("Gravitational Search Algorithm");
            }else if (EAOrNN == 8){
                nameOfAll.add("Immune Gravitation Inspired Optimization Algorithm");
            }else {
                nameOfAll.add("Artificial Immune System");
            }

            if (EAOrNN == 5) {
                nameOfAll.add("Iterations/Individuals");
            } else {
                nameOfAll.add("Generations/Runs");
            }

            nameOfAll.add("Fitness Value");
            LineChart demo = new LineChart("Line graph for all generations", listOfSeriesToAdd, nameOfAll, lowerDomain, upperDomain);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
        } else {
            LinkedList<LineAtrributes> listOfSeriesToAdd = new LinkedList<>();

            XYSeries series1 = new XYSeries("Predicted");

            int size = valuesOfY[0].length;

            for (int i = 0; i < size; i++) {
                series1.add(i, valuesOfY[0][i]);

                if (valuesOfY[0][i] > upperDomain) {
                    upperDomain = valuesOfY[0][i];
                } else if (valuesOfY[0][i] < lowerDomain) {
                    lowerDomain = valuesOfY[0][i];
                }
            }
            boolean series1Shape = false;
            boolean series1Line = true;

            LineAtrributes lineSeries1 = new LineAtrributes(series1, series1Line, series1Shape);

            XYSeries series2 = new XYSeries("Actual");
            for (int i = 0; i < size; i++) {
                series2.add(i, valuesOfY[1][i]);

                if (valuesOfY[1][i] > upperDomain) {
                    upperDomain = valuesOfY[1][i];
                } else if (valuesOfY[1][i] < lowerDomain) {
                    lowerDomain = valuesOfY[1][i];
                }
            }
            boolean series2Shape = false;
            boolean series2Line = true;

            LineAtrributes lineSeries2 = new LineAtrributes(series2, series2Line, series2Shape);

            listOfSeriesToAdd.add(lineSeries1);
            listOfSeriesToAdd.add(lineSeries2);

            LinkedList<String> nameOfAll = new LinkedList<>();

            String name = cmbNNTechnique.getSelectedItem().toString();

            nameOfAll.add("");

            nameOfAll.add("Day");
            nameOfAll.add("Stock Value");

            LineChart demo = new LineChart(name, listOfSeriesToAdd, nameOfAll, lowerDomain, upperDomain);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
        }
    }//GEN-LAST:event_cmdGenerateGraphsActionPerformed

    /*
    try {
            JFrame working = new JFrame();
            final JDialog dlgProgress = new JDialog(working, "Please wait...", true);//true means that the dialog created is modal
            JLabel lblStatus = new JLabel("Comparing all Optimization Algorithms..."); // this is just a label in which you can indicate the state of the processing

            JProgressBar pbProgress = new JProgressBar(0, 100);
            pbProgress.setIndeterminate(true); //we'll use an indeterminate progress bar

            dlgProgress.add(BorderLayout.NORTH, lblStatus);
            dlgProgress.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE); // prevent the user from closing the dialog
            dlgProgress.setSize(300, 90);

            SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    compareLongTaskAssingment2();
                    return null;
                }

                @Override
                protected void done() {
                    dlgProgress.dispose();//close the modal dialog
                }
            };

            sw.execute(); // this will start the processing on a separate thread
            dlgProgress.setVisible(true); //this will block user input as long as the processing task is working
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    */
    
    private void cmdCompareAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCompareAllActionPerformed
        try {
            SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    compareLongTaskAssingment2();
                    return null;
                }
            };

            sw.execute(); // this will start the processing on a separate thread
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdCompareAllActionPerformed

    private void cmdCompareNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCompareNNActionPerformed
        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                compareNN();
                return null;
            }
        };

        sw.execute(); // this will start the processing on a separate thread
    }//GEN-LAST:event_cmdCompareNNActionPerformed

    private void cmdVaccinateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdVaccinateActionPerformed
        try {
            SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    IGOA();
                    return null;
                }
            };

            sw.execute(); // this will start the processing on a separate thread
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdVaccinateActionPerformed

    private void cmdGravityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGravityActionPerformed
        try {
            SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    GSA();
                    return null;
                }
            };

            sw.execute(); // this will start the processing on a separate thread
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdGravityActionPerformed

    private void cmdFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFAActionPerformed
        try {SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                FA();
                return null;
            }
        };

        sw.execute(); // this will start the processing on a separate thread
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdFAActionPerformed

    private void cmdBSOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBSOActionPerformed
        try {
            SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    BSO();
                    return null;
                }};

                sw.execute(); // this will start the processing on a separate thread
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_cmdBSOActionPerformed

    private void cmdComputeNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdComputeNNActionPerformed
        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {

                //for (int i = 0; i < 5; i++) {
                    neuralNetworkWorking();
                    //Thread.sleep(1000);
                    //}
                return null;
            }
        };

        sw.execute(); // this will start the processing on a separate thread
    }//GEN-LAST:event_cmdComputeNNActionPerformed

    private void cmdSelectFileForNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectFileForNNActionPerformed
        try {
            JFileChooser fc = new JFileChooser();

            int returnVal = fc.showOpenDialog(null);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                theDatabaseForNN = fc.getSelectedFile();
            }

            lblNameOfFile.setText(theDatabaseForNN.getName());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select a valid CSV file", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdSelectFileForNNActionPerformed

    private void cmdAISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAISActionPerformed
        try {
            SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    AIS();
                    return null;
                }
            };

            sw.execute(); // this will start the processing on a separate thread
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdAISActionPerformed

    private void cmdRunPSOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRunPSOActionPerformed
        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                PSO();
                return null;
            }
        };

        sw.execute(); // this will start the processing on a separate thread
    }//GEN-LAST:event_cmdRunPSOActionPerformed

    private void cmdFuntion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFuntion2ActionPerformed
        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                longProcessingTaskFuntion2();
                return null;
            }
        };

        sw.execute(); // this will start the processing on a separate thread
    }//GEN-LAST:event_cmdFuntion2ActionPerformed

    public void compareNN() {
        comparing = true;
        compareIndex = 0;

        cmbNNTechnique.setSelectedIndex(0);
        neuralNetworkWorking();
        compareIndex++;

        cmbNNTechnique.setSelectedIndex(1);
        neuralNetworkWorking();
        compareIndex++;

        comparing = false;
        comparingGraphShow();
    }
    
    private void compareLongTaskAssingment2() {
        comparing = true;
        compareIndex = 0;

        if (ckbAIS.isSelected()) {
            txtCompareText.setText("Working on Artificial Immune System");
            AIS();
            compareIndex++;
        }

        if (ckbBSO.isSelected()) {
            txtCompareText.setText("Working on Brain Storming Optimization");
            BSO();
            compareIndex++;
        }

        if (ckbPSO.isSelected()) {
            txtCompareText.setText("Working on Partical Swarm Optimization");
            PSO();
            compareIndex++;
        }

        if (ckbFA.isSelected()) {
            txtCompareText.setText("Working on Firefly Algorithm");
            FA();
            compareIndex++;
        }

        if (ckbEP.isSelected()) {
            txtCompareText.setText("Working on Evolutionary Programming");
            cbbSurvivalSelection.setSelectedIndex(cbbSSEP.getSelectedIndex());
            cbbAlgorithmType.setSelectedIndex(0);
            longProcessingTaskFuntion2();
            compareIndex++;
        }

        if (ckbEA.isSelected()) {
            cbbParentSelection.setSelectedIndex(cbbPSEA.getSelectedIndex());
            cbbSurvivalSelection.setSelectedIndex(cbbSSEA.getSelectedIndex());
            cbbAlgorithmType.setSelectedIndex(2);
            txtCompareText.setText("Working on Evolutionary Algorithm: " + cbbPSEA.getSelectedItem().toString() + " and " + cbbSSEA.getSelectedItem().toString());
            longProcessingTaskFuntion2();
            compareIndex++;
        }
        
        if (ckbGSA.isSelected()) {
            txtCompareText.setText("Working on Gravitational Search Algorithm");
            GSA();
            compareIndex++;
        }
        
        if (ckbIGOA.isSelected()) {
            txtCompareText.setText("Working on Immune Gravitation Inspired");
            IGOA();
            compareIndex++;
        }

        comparing = false;
        txtCompareText.setText("Generating graphs, please wait");
        comparingGraphShow();
        txtCompareText.setText("Computation complete");
        pgCA.setValue(0);
    }

    //all algorithms that are used
    private void longProcessingTaskFuntion2() {
        boolean enterOrNot = true;
        EAOrNN = 2;

        if (!comparing) {
            funtionValue = (cbbChooseFunction.getSelectedIndex() + 1);
            try {
                sizeofGenerations = (Integer.parseInt(txtGenerations.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }

        pbProgression.setValue(0);
        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        int wokring = 0;
        double currectT;
            
        for (int avgBest = 0; avgBest < sizeofRuns && enterOrNot; avgBest++) {
            double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();
            
            ComputeCost Function1Computation = new ComputeCost();

            int maximumValueX = 0;
            int minimumValueX = 0;
            int maximumValueY = 0;
            int minimumValueY = 0;
            int rangeValue = 0;

            if (funtionValue == 2) {
                maximumValueX = 200;
                minimumValueX = -200;
                maximumValueY = 300;
                minimumValueY = -100;
                rangeValue = 100;
            } else if (funtionValue == 1) {
                maximumValueX = 500;
                maximumValueY = 500;
                minimumValueX = -500;
                minimumValueY = -500;
                rangeValue = 100;
            } else if (funtionValue == 3) {
                maximumValueX = 400;
                maximumValueY = 400;
                minimumValueX = -400;
                minimumValueY = -400;
                rangeValue = 100;
            } else if (funtionValue == 4) {
                maximumValueX = 100;
                maximumValueY = 500;
                minimumValueX = -100;
                minimumValueY = -500;
                rangeValue = 100;
            } else {
                maximumValueX = 200;
                maximumValueY = 100;
                minimumValueX = -200;
                minimumValueY = -100;
                rangeValue = 100;
            }

            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            Function1Computation.AddStates(setPair1X, setPair1Y);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            Function1Computation.AddStates(setPair2X, setPair2Y);

            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            Function1Computation.AddStates(setPair3X, setPair3Y);

            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
            Function1Computation.AddStates(setPair4X, setPair4Y);

            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            Function1Computation.AddStates(setPair5X, setPair5Y);

            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            Function1Computation.AddStates(setPair6X, setPair6Y);

            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            Function1Computation.AddStates(setPair7X, setPair7Y);

            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            Function1Computation.AddStates(setPair8X, setPair8Y);

            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            Function1Computation.AddStates(setPair9X, setPair9Y);

            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            lblPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            Function1Computation.AddStates(setPair10X, setPair10Y);

            for (int count = 0; count < sizeofGenerations; count++) {
                ComputeCost Function1Offsprings = new ComputeCost();
                Function1Computation.sortTheSetsOnFitnessValue(funtionValue);

                int typeOfAlgorithm = cbbAlgorithmType.getSelectedIndex();

                int sizeOfOffspring;

                if (typeOfAlgorithm == 1) {
                    sizeOfOffspring = 8;
                } else {
                    sizeOfOffspring = Function1Computation.getListSize() / 2;
                }

                if (typeOfAlgorithm == 0) {
                    for (int i = 0; i < sizeOfOffspring; i++) {

                        Cost parent1 = new Cost(Function1Computation.getStates((2 * i)).getValueofX(), Function1Computation.getStates((2 * i)).getValueofY());
                        Cost parent2 = new Cost(Function1Computation.getStates((2 * i) + 1).getValueofX(), Function1Computation.getStates((2 * i) + 1).getValueofY());

                        ExplorationAndExploitation expoExploi = new ExplorationAndExploitation(parent1, parent2);

                        expoExploi.mutationOfTheParents(((double) maximumValueX / (double) rangeValue), ((double) minimumValueX / (double) rangeValue), ((double) maximumValueY / (double) rangeValue), ((double) minimumValueY / (double) rangeValue), typeOfAlgorithm, ckbGaussian.isSelected());

                        Function1Offsprings.AddStates(expoExploi.newParent1().getValueofX(), expoExploi.newParent1().getValueofY());
                        Function1Offsprings.AddStates(expoExploi.newParent2().getValueofX(), expoExploi.newParent2().getValueofY());
                    }

                    int sizeOfLinkedList1 = Function1Offsprings.getListSize();
                    for (int i = 0; i < sizeOfLinkedList1; i++) {
                        Function1Computation.AddStates(Function1Offsprings.getStates(i).getValueofX(), Function1Offsprings.getStates(i).getValueofY());
                    }

                    Function1Computation.sortTheSetsOnFitnessValue(funtionValue);

                    if (cbbSurvivalSelection.getSelectedIndex() == 0) {
                        try {
                            Function1Computation.userFitnessProportionScehemeForSurvival(funtionValue);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else if (cbbSurvivalSelection.getSelectedIndex() == 1) {
                        try {
                            Function1Computation.userRankedBasedScehemeForSurvival();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else if (cbbSurvivalSelection.getSelectedIndex() == 2) {
                        try {
                            Function1Computation.userbinaryTournamentMethodForSurvival(funtionValue);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        try {
                            Function1Computation.useTruncationForSurvivalSelection(sizeOfLinkedList1);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }

                } else if (typeOfAlgorithm == 1) {
                    for (int i = 0; i < sizeOfOffspring; i++) {

                        int[] parentsChosen = Function1Computation.uniformRandomScheme(funtionValue);

                        Cost parent1 = new Cost(Function1Computation.getStates(parentsChosen[0]).getValueofX(), Function1Computation.getStates(parentsChosen[0]).getValueofY());
                        Cost parent2 = new Cost(Function1Computation.getStates(parentsChosen[1]).getValueofX(), Function1Computation.getStates(parentsChosen[1]).getValueofY());
                        ExplorationAndExploitation expoExploi = new ExplorationAndExploitation(parent1, parent2);

                        expoExploi.crossOverOfTwoParent(((double) maximumValueX / (double) rangeValue), ((double) minimumValueX / (double) rangeValue), ((double) maximumValueY / (double) rangeValue), ((double) minimumValueY / (double) rangeValue), typeOfAlgorithm, ckbGaussian.isSelected());

                        Function1Offsprings.AddStates(expoExploi.newParent1().getValueofX(), expoExploi.newParent1().getValueofY());
                        Function1Offsprings.AddStates(expoExploi.newParent2().getValueofX(), expoExploi.newParent2().getValueofY());
                    }

                    Function1Offsprings.sortTheSetsOnFitnessValue(funtionValue);
                    int sizeOfLinkedList1 = Function1Computation.getListSize();

                    Function1Computation.cleanTheEntireList();

                    for (int i = 0; i < sizeOfLinkedList1; i++) {
                        Function1Computation.AddStates(Function1Offsprings.getStates(i).getValueofX(), Function1Offsprings.getStates(i).getValueofY());
                    }
                } else {
                    for (int i = 0; i < sizeOfOffspring; i++) {
                        int[] parentsChosen = new int[2];

                        if (cbbParentSelection.getSelectedIndex() == 0) {
                            try {
                                parentsChosen = Function1Computation.useFitnessProportionSchemeMethod(funtionValue);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } else if (cbbParentSelection.getSelectedIndex() == 1) {
                            try {
                                parentsChosen = Function1Computation.useRankBasedSchemeMethod();
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } else if (cbbParentSelection.getSelectedIndex() == 2) {
                            try {
                                parentsChosen = Function1Computation.useBinaryTournamentMethod(funtionValue);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } else {
                            try {
                                parentsChosen = Function1Computation.uniformRandomScheme(funtionValue);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }

                        Cost parent1 = new Cost(Function1Computation.getStates(parentsChosen[0]).getValueofX(), Function1Computation.getStates(parentsChosen[0]).getValueofY());
                        Cost parent2 = new Cost(Function1Computation.getStates(parentsChosen[1]).getValueofX(), Function1Computation.getStates(parentsChosen[1]).getValueofY());
                        ExplorationAndExploitation expoExploi = new ExplorationAndExploitation(parent1, parent2);
                        expoExploi.crossOverOfTwoParent(((double) maximumValueX / (double) rangeValue), ((double) minimumValueX / (double) rangeValue), ((double) maximumValueY / (double) rangeValue), ((double) minimumValueY / (double) rangeValue), typeOfAlgorithm, ckbGaussian.isSelected());
                        Function1Offsprings.AddStates(expoExploi.newParent1().getValueofX(), expoExploi.newParent1().getValueofY());
                        Function1Offsprings.AddStates(expoExploi.newParent2().getValueofX(), expoExploi.newParent2().getValueofY());
                    }

                    int sizeOfLinkedList1 = Function1Offsprings.getListSize();

                    for (int i = 0; i < sizeOfLinkedList1; i++) {
                        Function1Computation.AddStates(Function1Offsprings.getStates(i).getValueofX(), Function1Offsprings.getStates(i).getValueofY());
                    }

                    Function1Computation.sortTheSetsOnFitnessValue(funtionValue);

                    if (cbbSurvivalSelection.getSelectedIndex() == 3) {
                        try {
                            Function1Computation.useTruncationForSurvivalSelection(Function1Computation.getListSize() / 2);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else if (cbbSurvivalSelection.getSelectedIndex() == 0) {
                        try {
                            Function1Computation.userFitnessProportionScehemeForSurvival(funtionValue);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else if (cbbSurvivalSelection.getSelectedIndex() == 1) {
                        try {
                            Function1Computation.userRankedBasedScehemeForSurvival();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else if (cbbSurvivalSelection.getSelectedIndex() == 2) {
                        try {
                            Function1Computation.userbinaryTournamentMethodForSurvival(funtionValue);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }

                double maxVal[] = Function1Computation.getTheBiggestWithIndex(funtionValue);

                generationsCount[avgBest][count] = maxVal[0];
                
                if(maxVal[0] > maximumValue){
                    maximumValue = maxVal[0];
                    maxTValue = System.currentTimeMillis();
                }
                
                double val = 0;
                int sizeOfNewOffsprings = Function1Computation.getListSize();
                for (int k = 0; k < sizeOfNewOffsprings; k++) {
                    val += Function1Computation.getCostOfXandY(k, funtionValue);
                }
                avggenerationsFitness[avgBest][count] = (val / sizeOfNewOffsprings);
                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtCurrently.setText("Currently computing: " + avgBest + " Run. " + count + " Generation.");
                    pbProgression.setValue((int) (valueForProgressBar * 100));
                }
            }
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtCurrently.setText("Computation Complete.");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }
    }

    private void PSO() {
        boolean enterOrNot = true;
        EAOrNN = 3;
        double c1 = 2;
        double c2 = 2;

        if (!comparing) {
            funtionValue = (cbbPSOFunction.getSelectedIndex() + 1);
            try {
                sizeofGenerations = (Integer.parseInt(txtPSOGenerations.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtPSORuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                c1 = (Double.valueOf(txtC1.getText()));
                if (c1 < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                c2 = (Double.valueOf(txtC2.getText()));
                if (c2 < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 1);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }

        pbProgression.setValue(0);
        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        int wokring = 0;
        double currectT;
            
        for (int avgBest = 0; avgBest < sizeofRuns && enterOrNot; avgBest++) {
            ParticalSwarmIntelligence parentsComputations = new ParticalSwarmIntelligence();
            double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();

            int maximumValueX;
            int minimumValueX;
            int maximumValueY;
            int minimumValueY;
            int rangeValue;

            if (funtionValue == 1) {
                maximumValueX = 200;
                minimumValueX = -200;
                maximumValueY = 300;
                minimumValueY = -100;
                rangeValue = 100;
            } else if (funtionValue == 2) {
                maximumValueX = 400;
                maximumValueY = 400;
                minimumValueX = -400;
                minimumValueY = -400;
                rangeValue = 100;
            } else if (funtionValue == 3) {
                maximumValueX = 100;
                maximumValueY = 500;
                minimumValueX = -100;
                minimumValueY = -500;
                rangeValue = 100;
            } else {
                maximumValueX = 200;
                maximumValueY = 100;
                minimumValueX = -200;
                minimumValueY = -100;
                rangeValue = 100;
            }

            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            parentsComputations.addPartical(setPair1X, setPair1Y, funtionValue);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            parentsComputations.addPartical(setPair2X, setPair2Y, funtionValue);

            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            parentsComputations.addPartical(setPair3X, setPair3Y, funtionValue);

            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
            parentsComputations.addPartical(setPair4X, setPair4Y, funtionValue);

            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            parentsComputations.addPartical(setPair5X, setPair5Y, funtionValue);

            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            parentsComputations.addPartical(setPair6X, setPair6Y, funtionValue);

            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            parentsComputations.addPartical(setPair7X, setPair7Y, funtionValue);

            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            parentsComputations.addPartical(setPair8X, setPair8Y, funtionValue);

            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            parentsComputations.addPartical(setPair9X, setPair9Y, funtionValue);

            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtPSOPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            parentsComputations.addPartical(setPair10X, setPair10Y, funtionValue);

            for (int count = 0; count < sizeofGenerations; count++) {

                parentsComputations.letTheSwarmMove(funtionValue, c1, c2, (maximumValueX / rangeValue), (minimumValueX / rangeValue), (maximumValueY / rangeValue), (minimumValueY / rangeValue));

                generationsCount[avgBest][count] = parentsComputations.getCostGBest(funtionValue);
                
                if(generationsCount[avgBest][count] > maximumValue){
                    maximumValue = generationsCount[avgBest][count];
                    maxTValue = System.currentTimeMillis();
                }
                
                double val = 0;
                int sizeOfSwarm = parentsComputations.getSwarmSize();
                for (int k = 0; k < sizeOfSwarm; k++) {
                    val += parentsComputations.getCostOfParticals(k, funtionValue);
                }
                avggenerationsFitness[avgBest][count] = (val / sizeOfSwarm);
                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtPSOCurrently.setText("Currently computing: " + avgBest + " Run. " + count + " Generation.");
                    pbbPSOAIS.setValue((int) (valueForProgressBar * 100));
                }
            }
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtPSOCurrently.setText("Computation Complete.");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }
    }

    private void BSO() {
        boolean enterOrNot = true;
        EAOrNN = 5;
        int clusters = 4;

        //the names are taken from the research papers itself, so easier understanding
        double P5a = 0.5;
        double P6b = 0.5;
        double P6biii = 0.5;
        double P6c = 0.5;

        if (!comparing) {
            funtionValue = (cbbBSOFunction.getSelectedIndex() + 2);
            try {
                sizeofRuns = (Integer.parseInt(txtBSORuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Total iterations to run box:", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                clusters = (Integer.parseInt(txtClusters.getText()));
                if (clusters < 0 || clusters > 6) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer less than six (6) in the total Clusters text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofGenerations = (Integer.parseInt(txtBSOGen.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Individuals text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                P5a = (Double.valueOf(txt5a.getText()));
                if (P5a < 0 || P5a > 1) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a probability value in the cluster centre probability text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                P6b = (Double.valueOf(txt6b.getText()));
                if (P6b < 0 || P6b > 1) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a probability value in the exploitation probability text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                P6biii = (Double.valueOf(txt6biii.getText()));
                if (P6biii < 0 || P6biii > 1) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a probability value in the cluster centre selection probability text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                P6c = (Double.valueOf(txt6c.getText()));
                if (P6c < 0 || P6c > 1) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a probability value in the cluster centre combination probability text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }

        pbBSO.setValue(0);
        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        int wokring = 0;
        int maximumValueX;
        int minimumValueX;
        int maximumValueY;
        int minimumValueY;
        int rangeValue = 100;

        if (funtionValue == 2) {
            maximumValueX = 200;
            minimumValueX = -200;
            maximumValueY = 300;
            minimumValueY = -100;
        } else if (funtionValue == 4) {
            maximumValueX = 100;
            maximumValueY = 500;
            minimumValueX = -100;
            minimumValueY = -500;
        } else if (funtionValue == 5) {
            maximumValueX = 200;
            maximumValueY = 100;
            minimumValueX = -200;
            minimumValueY = -100;
        } else {
            maximumValueX = 400;
            maximumValueY = 400;
            minimumValueX = -400;
            minimumValueY = -400;
        }
        
        double currectT;
            
        for (int ru = 0; ru < sizeofRuns; ru++) {
            LinkedList<BSO> groupIndividuals = new LinkedList<>();
                        double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();

             
            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            
            BSO groupInd1 = new BSO(setPair1X,setPair1Y);
            groupIndividuals.add(groupInd1);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            
            BSO groupInd2 = new BSO(setPair2X,setPair2Y);
            groupIndividuals.add(groupInd2);
            
            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            
            BSO groupInd3 = new BSO(setPair3X,setPair3Y);
            groupIndividuals.add(groupInd3);
            
            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
           
            BSO groupInd4 = new BSO(setPair4X,setPair4Y);
            groupIndividuals.add(groupInd4);
            
            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            
            BSO groupInd5 = new BSO(setPair5X,setPair5Y);
            groupIndividuals.add(groupInd5);
            
            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            
            BSO groupInd6 = new BSO(setPair6X,setPair6Y);
            groupIndividuals.add(groupInd6);
            
            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            
            BSO groupInd7 = new BSO(setPair7X,setPair7Y);
            groupIndividuals.add(groupInd7);
            
            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            
            BSO groupInd8 = new BSO(setPair8X,setPair8Y);
            groupIndividuals.add(groupInd8);
            
            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            
            BSO groupInd9 = new BSO(setPair9X,setPair9Y);
            groupIndividuals.add(groupInd9);
            
            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtBSOPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            
            BSO groupInd10 = new BSO(setPair10X,setPair10Y);
            groupIndividuals.add(groupInd10);
            
            for (int avgBest = 0; avgBest < sizeofGenerations && enterOrNot; avgBest++) {

                for (int i = 0; i < 10; i++) {
                    groupIndividuals.get(i).setClusterNumber(((int) getARandomNumberBetween(1, clusters)));
                }

                try {
                    Collections.sort(groupIndividuals, new Sorter());
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                }

                int[] bestIndCluster = new int[clusters];

                boolean rerun = false;
                for (int j = 1; j < clusters + 1; j++) {
                    bestIndCluster[j - 1] = -1;
                    double bestcost = -100000000;

                    for (int i = 0; i < 10; i++) {
                        BSO temp = groupIndividuals.get(i);
                        if (temp.getclusterNumber() == j) {
                            double val = temp.getCost(funtionValue);
                            if (val > bestcost) {
                                bestIndCluster[j - 1] = i;
                                bestcost = val;
                            }
                        }
                    }

                    if (bestIndCluster[j - 1] == -1) {
                        rerun = true;
                        break;
                    }
                }

                if (rerun) {
                    avgBest--;
                    rerun = false;
                    continue;
                }

                double prob1 = (getARandomNumberBetween(0, 100) / rangeValue);

                if (prob1 < P5a) {
                    int randCluster = (int) getARandomNumberBetween(1, clusters);
                    BSO groupInd = new BSO(((getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue), ((getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue));
                    groupInd.setClusterNumber(randCluster);

                    groupIndividuals.set(bestIndCluster[randCluster - 1], groupInd);
                }

                for (int count = 0; count < 10; count++) {
                    BSO tempnew;
                    prob1 = (getARandomNumberBetween(0, 100) / rangeValue);

                    if (prob1 < P6b) {

                        int selectRandClust = groupIndividuals.size() - 1;
                        selectRandClust = (int) getARandomNumberBetween(0, selectRandClust);

                        prob1 = (getARandomNumberBetween(0, 100) / rangeValue);

                        if (prob1 < P6biii) {
                            int randClust = groupIndividuals.get(selectRandClust).getclusterNumber() - 1;
                            BSO bestInd = groupIndividuals.get(bestIndCluster[randClust]);
                            tempnew = new BSO(bestInd.getX(), bestInd.getY());

                            tempnew.BSOMutation((double) maximumValueX / (double) rangeValue, (double) minimumValueX / (double) rangeValue, (double) maximumValueY / (double) rangeValue, (double) minimumValueY / (double) rangeValue, funtionValue);

                            if (tempnew.getCost(funtionValue) > bestInd.getCost(funtionValue)) {
                                tempnew.setClusterNumber(bestInd.getclusterNumber());
                                groupIndividuals.set(bestIndCluster[groupIndividuals.get(selectRandClust).getclusterNumber() - 1], tempnew);
                            }
                        } else {
                            int locate;

                            selectRandClust = groupIndividuals.get(selectRandClust).getclusterNumber();

                            do {
                                locate = (int) getARandomNumberBetween(0, groupIndividuals.size() - 1);
                            } while (groupIndividuals.get(locate).getclusterNumber() != selectRandClust);

                            BSO randInd = groupIndividuals.get(locate);
                            tempnew = new BSO(randInd.getX(), randInd.getY());
                            tempnew.BSOMutation((double) maximumValueX / (double) rangeValue, (double) minimumValueX / (double) rangeValue, (double) maximumValueY / (double) rangeValue, (double) minimumValueY / (double) rangeValue, funtionValue);

                            if (tempnew.getCost(funtionValue) > randInd.getCost(funtionValue)) {
                                tempnew.setClusterNumber(randInd.getclusterNumber());
                                groupIndividuals.set(locate, tempnew);
                            }
                        }
                    } else {

                        int pos = (int) getARandomNumberBetween(0, groupIndividuals.size() - 1);
                        BSO temp = groupIndividuals.get(pos);
                        int selectRandClust1 = (temp.getclusterNumber()) - 1;

                        pos = (int) getARandomNumberBetween(0, groupIndividuals.size() - 1);
                        temp = groupIndividuals.get(pos);
                        int selectRandClust2 = (temp.getclusterNumber()) - 1;

                        prob1 = (getARandomNumberBetween(0, 100) / rangeValue);

                        if (prob1 < P6c) {

                            BSO bestInd1 = groupIndividuals.get(bestIndCluster[selectRandClust1]);
                            BSO bestInd2 = groupIndividuals.get(bestIndCluster[selectRandClust2]);

                            prob1 = (getARandomNumberBetween(0, 100) / rangeValue);

                            if (prob1 > 0.5) {
                                tempnew = new BSO(bestInd1.getX(), bestInd2.getY());
                            } else {
                                tempnew = new BSO(bestInd2.getX(), bestInd1.getY());
                            }

                            tempnew.BSOMutation((double) maximumValueX / (double) rangeValue, (double) minimumValueX / (double) rangeValue, (double) maximumValueY / (double) rangeValue, (double) minimumValueY / (double) rangeValue, funtionValue);

                            if (tempnew.getCost(funtionValue) > bestInd1.getCost(funtionValue)) {
                                tempnew.setClusterNumber(bestInd1.getclusterNumber());
                                groupIndividuals.set(bestIndCluster[selectRandClust1], tempnew);
                            } else if (tempnew.getCost(funtionValue) > bestInd2.getCost(funtionValue)) {
                                tempnew.setClusterNumber(bestInd2.getclusterNumber());
                                groupIndividuals.set(bestIndCluster[selectRandClust2], tempnew);
                            }
                        } else {
                            int locate1;
                            int locate2;
                            selectRandClust1++;
                            selectRandClust2++;

                            do {
                                locate1 = (int) getARandomNumberBetween(0, groupIndividuals.size() - 1);
                            } while (groupIndividuals.get(locate1).getclusterNumber() != selectRandClust1);

                            do {
                                locate2 = (int) getARandomNumberBetween(0, groupIndividuals.size() - 1);
                            } while (groupIndividuals.get(locate2).getclusterNumber() != selectRandClust2);

                            BSO randInd1 = groupIndividuals.get(locate1);
                            BSO randInd2 = groupIndividuals.get(locate2);

                            prob1 = (getARandomNumberBetween(0, 100) / rangeValue);

                            if (prob1 > 0.5) {
                                tempnew = new BSO(randInd1.getX(), randInd2.getY());
                            } else {
                                tempnew = new BSO(randInd2.getX(), randInd1.getY());
                            }

                            tempnew.BSOMutation((double) maximumValueX / (double) rangeValue, (double) minimumValueX / (double) rangeValue, (double) maximumValueY / (double) rangeValue, (double) minimumValueY / (double) rangeValue, funtionValue);

                            if (tempnew.getCost(funtionValue) > randInd1.getCost(funtionValue)) {
                                tempnew.setClusterNumber(randInd1.getclusterNumber());
                                groupIndividuals.set(locate1, tempnew);
                            } else if (tempnew.getCost(funtionValue) > randInd2.getCost(funtionValue)) {
                                tempnew.setClusterNumber(randInd2.getclusterNumber());
                                groupIndividuals.set(locate2, tempnew);
                            }
                        }
                    }
                }

                double best = -100000;

                for (int i = 0; i < clusters; i++) {
                    double temp = groupIndividuals.get(bestIndCluster[i]).getCost(funtionValue);

                    if (temp > best) {
                        best = temp;
                    }
                }
                
                
                if(best > maximumValue){
                    maximumValue = best;
                    maxTValue = System.currentTimeMillis();
                }

                generationsCount[ru][avgBest] = best;
                double val = 0;

                for (int k = 0; k < 10; k++) {
                    val += groupIndividuals.get(k).getCost(funtionValue);
                }
                avggenerationsFitness[ru][avgBest] = (val / 10);

                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtBSOprogress.setText("Currently computing: Generation number " + avgBest + " of run number " + ru + ".");
                    pbBSO.setValue((int) (valueForProgressBar * 100));
                }
            }            
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtBSOprogress.setText("Computation complete");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }

    }

    private void FA() {
        boolean enterOrNot = true;
        EAOrNN = 6;
        double BetaAttract = 0.5;
        int GammaCoefficient = 5;
        double alpha = 0.5;

        if (!comparing) {
            funtionValue = (cbbFAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtGenFA.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtRunsFA.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                BetaAttract = (Double.valueOf(txtAttractiveness.getText()));
                if (BetaAttract < 0 || BetaAttract > 1) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive value between 0 and 1 in the Maximum Attractiveness text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                GammaCoefficient = (Integer.parseInt(txtAbsorption.getText()));
                if (GammaCoefficient < 0 || GammaCoefficient > 20) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter an integer between 0 and 20 (inclusive) in the Absorption coefficient text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                alpha = (Double.valueOf(txtFAAlpha.getText()));
                if (alpha < 0 || alpha > 1) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive value between 0 and 1 in the Value for Alpha text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }

        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        pbFA.setValue(0);
        int wokring = 0;
        int distanceType = cbbDistance.getSelectedIndex() + 1;
        double currectT;
            
        for (int avgBest = 0; avgBest < sizeofRuns && enterOrNot; avgBest++) {
            ComputeCost parentsComputations = new ComputeCost();

            double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();

            int maximumValueX;
            int minimumValueX;
            int maximumValueY;
            int minimumValueY;
            int rangeValue = 100;

            if (funtionValue == 2) {
                maximumValueX = 200;
                minimumValueX = -200;
                maximumValueY = 300;
                minimumValueY = -100;
            } else if (funtionValue == 4) {
                maximumValueX = 100;
                maximumValueY = 500;
                minimumValueX = -100;
                minimumValueY = -500;
            } else if (funtionValue == 5) {
                maximumValueX = 200;
                maximumValueY = 100;
                minimumValueX = -200;
                minimumValueY = -100;
            } else {
                maximumValueX = 400;
                maximumValueY = 400;
                minimumValueX = -400;
                minimumValueY = -400;
            }

            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            parentsComputations.AddStates(setPair1X, setPair1Y);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            parentsComputations.AddStates(setPair2X, setPair2Y);

            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            parentsComputations.AddStates(setPair3X, setPair3Y);

            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
            parentsComputations.AddStates(setPair4X, setPair4Y);

            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            parentsComputations.AddStates(setPair5X, setPair5Y);

            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            parentsComputations.AddStates(setPair6X, setPair6Y);

            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            parentsComputations.AddStates(setPair7X, setPair7Y);

            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            parentsComputations.AddStates(setPair8X, setPair8Y);

            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            parentsComputations.AddStates(setPair9X, setPair9Y);

            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtFAPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            parentsComputations.AddStates(setPair10X, setPair10Y);

            for (int count = 0; count < sizeofGenerations; count++) {
                for (int k = 0; k < 10; k++) {
                    for (int i = 0; i < 10; i++) {
                        if (parentsComputations.getCostOfXandY(k, funtionValue) < parentsComputations.getCostOfXandY(i, funtionValue)) {
                            double distanceIandJ = parentsComputations.getDistance(k, i, distanceType);
                            double totalAttractiveness = BetaAttract * (Math.exp(-1 * distanceIandJ * GammaCoefficient));

                            double randVectorX = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
                            double randVectorY = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;

                            double newX = (((1 - totalAttractiveness) * parentsComputations.getStates(k).getValueofX()) + ((totalAttractiveness) * parentsComputations.getStates(i).getValueofX()) + randVectorX);

                            if (newX > ((double) maximumValueX / (double) rangeValue)) {
                                newX = (double) maximumValueX / (double) rangeValue;
                            } else if (newX < ((double) minimumValueX / (double) rangeValue)) {
                                newX = (double) minimumValueX / (double) rangeValue;
                            }

                            double newY = (((1 - totalAttractiveness) * parentsComputations.getStates(k).getValueofY()) + ((totalAttractiveness) * parentsComputations.getStates(i).getValueofY()) + randVectorY);

                            if (newY > ((double) maximumValueY / (double) rangeValue)) {
                                newY = (double) maximumValueY / (double) rangeValue;
                            } else if (newY < ((double) minimumValueY / (double) rangeValue)) {
                                newY = (double) minimumValueY / (double) rangeValue;
                            }

                            parentsComputations.getStates(k).setValueofX(newX);
                            parentsComputations.getStates(k).setValueofY(newY);
                        }
                    }
                }

                double max[] = parentsComputations.getTheBiggestWithIndex(funtionValue);

                double rand1 = (getARandomNumberBetween(1, 99)) / (double) rangeValue;
                double rand2 = (getARandomNumberBetween(1, 99)) / (double) rangeValue;

                double newX;
                double newY;

                if ((rand1 - 0.5) < 0) {
                    newX = alpha * rand2 * (((double) maximumValueX / (double) rangeValue) - parentsComputations.getStates((int) max[1]).getValueofX());
                    newY = alpha * rand2 * (((double) maximumValueY / (double) rangeValue) - parentsComputations.getStates((int) max[1]).getValueofY());
                } else {
                    newX = -1 * alpha * rand2 * (parentsComputations.getStates((int) max[1]).getValueofX() - ((double) minimumValueX / (double) rangeValue));
                    newY = -1 * alpha * rand2 * (parentsComputations.getStates((int) max[1]).getValueofY() - ((double) minimumValueY / (double) rangeValue));
                }

                newX += parentsComputations.getStates((int) max[1]).getValueofX();
                newY += parentsComputations.getStates((int) max[1]).getValueofY();

                if (newX > ((double) maximumValueX / (double) rangeValue)) {
                    newX = (double) maximumValueX / (double) rangeValue;
                } else if (newX < ((double) minimumValueX / (double) rangeValue)) {
                    newX = (double) minimumValueX / (double) rangeValue;
                }

                if (newY > ((double) maximumValueY / (double) rangeValue)) {
                    newY = (double) maximumValueY / (double) rangeValue;
                } else if (newY < ((double) minimumValueY / (double) rangeValue)) {
                    newY = (double) minimumValueY / (double) rangeValue;
                }

                parentsComputations.getStates((int) max[1]).setValueofX(newX);
                parentsComputations.getStates((int) max[1]).setValueofY(newY);

                max = parentsComputations.getTheBiggestWithIndex(funtionValue);

                generationsCount[avgBest][count] = max[0];
                
                if(max[0] > maximumValue){
                    maximumValue = max[0];
                    maxTValue = System.currentTimeMillis();
                }

                double val = 0;
                for (int k = 0; k < 10; k++) {
                    val += parentsComputations.getCostOfXandY(k, funtionValue);
                }
                avggenerationsFitness[avgBest][count] = (val / 10);
                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtComputeFA.setText("Currently computing: " + avgBest + " Run. " + count + " Generation.");
                    pbFA.setValue((int) (valueForProgressBar * 100));
                }
            }
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtComputeFA.setText("Computation Complete.");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }
    }
    
    private void AIS() {
        boolean enterOrNot = true;
        EAOrNN = 4;
        int size = 5;
        int sizeS = 3;
        int sizeR = 3;

        if (!comparing) {
            funtionValue = (cbbAISFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtAISGenerations.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeR = (Integer.parseInt(txtAISSubsetR.getText()));
                if (sizeR < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Subset R text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeS = (Integer.parseInt(txtAISSubsetS.getText()));
                if (sizeS < 0 || sizeS > 10) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer less than 10 in the Subset S text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtAISRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }

        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        pbbAIS.setValue(0);
        int wokring = 0;
        double currectT;
            
        for (int avgBest = 0; avgBest < sizeofRuns && enterOrNot; avgBest++) {
            ComputeCost parentsComputations = new ComputeCost();
            double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();


            int maximumValueX;
            int minimumValueX;
            int maximumValueY;
            int minimumValueY;
            int rangeValue = 100;

            if (funtionValue == 2) {
                maximumValueX = 200;
                minimumValueX = -200;
                maximumValueY = 300;
                minimumValueY = -100;
            } else if (funtionValue == 4) {
                maximumValueX = 100;
                maximumValueY = 500;
                minimumValueX = -100;
                minimumValueY = -500;
            } else if (funtionValue == 5) {
                maximumValueX = 200;
                maximumValueY = 100;
                minimumValueX = -200;
                minimumValueY = -100;
            } else {
                maximumValueX = 400;
                maximumValueY = 400;
                minimumValueX = -400;
                minimumValueY = -400;
            }

            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            parentsComputations.AddStates(setPair1X, setPair1Y);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            parentsComputations.AddStates(setPair2X, setPair2Y);

            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            parentsComputations.AddStates(setPair3X, setPair3Y);

            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
            parentsComputations.AddStates(setPair4X, setPair4Y);

            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            parentsComputations.AddStates(setPair5X, setPair5Y);

            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            parentsComputations.AddStates(setPair6X, setPair6Y);

            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            parentsComputations.AddStates(setPair7X, setPair7Y);

            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            parentsComputations.AddStates(setPair8X, setPair8Y);

            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            parentsComputations.AddStates(setPair9X, setPair9Y);

            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtAISPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            parentsComputations.AddStates(setPair10X, setPair10Y);

            for (int count = 0; count < sizeofGenerations; count++) {
                int subsetF[];

                if (cmbSubsetSelection.getSelectedIndex() == 0) {
                    subsetF = parentsComputations.subsetAISFitnessBased(size, funtionValue);
                } else {
                    parentsComputations.sortTheSetsOnFitnessValue(funtionValue);
                    subsetF = parentsComputations.subsetAISRankedBased(size);
                }

                ComputeCost F1 = new ComputeCost();

                for (int i = 0; i < size; i++) {
                    F1.AddStates(parentsComputations.getStates(subsetF[i]).getValueofX(), parentsComputations.getStates(subsetF[i]).getValueofY());
                }

                int subsetF1[];

                if (cmbSubsetSelection.getSelectedIndex() == 0) {
                    subsetF1 = F1.subsetAISFitnessBased(size, funtionValue);
                } else {
                    F1.sortTheSetsOnFitnessValue(funtionValue);
                    subsetF1 = F1.subsetAISRankedBased(size);
                }

                ComputeCost F = new ComputeCost();

                for (int i = 0; i < size; i++) {
                    F.AddStates(parentsComputations.getStates(subsetF1[i]).getValueofX(), parentsComputations.getStates(subsetF1[i]).getValueofY());
                }

                for (int i = 0; i < size; i++) {

                    Cost parent1 = new Cost(F.getStates(i).getValueofX(), F.getStates(i).getValueofY());

                    ExplorationAndExploitation expoExploi = new ExplorationAndExploitation(parent1);

                    expoExploi.AISMutation(((double) maximumValueX / (double) rangeValue), ((double) minimumValueX / (double) rangeValue), ((double) maximumValueY / (double) rangeValue), ((double) minimumValueY / (double) rangeValue), funtionValue);

                    F.AddStates(expoExploi.newParent1().getValueofX(), expoExploi.newParent1().getValueofY());
                }

                int subsetS[] = parentsComputations.subsetAISBinaryTournament(sizeS, funtionValue);

                for (int i = 0; i < sizeS; i++) {
                    parentsComputations.AddStates(F.getStates(subsetS[i]).getValueofX(), F.getStates(subsetS[i]).getValueofY());
                }

                for (int i = 0; i < sizeR; i++) {

                    double randomPairX = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
                    double randomPairY = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
                    parentsComputations.AddStates(randomPairX, randomPairY);
                }

                parentsComputations.sortTheSetsOnFitnessValue(funtionValue);

                parentsComputations.useTruncationForSurvivalSelection(sizeS + sizeR);

                generationsCount[avgBest][count] = parentsComputations.getStates(0).getCost(funtionValue);
                
                if(generationsCount[avgBest][count] > maximumValue){
                    maximumValue = generationsCount[avgBest][count];
                    maxTValue = System.currentTimeMillis();
                }

                
                double val = 0;
                
                
                int sizeOfSwarm = parentsComputations.getListSize();
                for (int k = 0; k < sizeOfSwarm; k++) {
                    val += parentsComputations.getCostOfXandY(k, funtionValue);
                }
                avggenerationsFitness[avgBest][count] = (val / sizeOfSwarm);
                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtAISCurrently.setText("Currently computing: " + avgBest + " Run. " + count + " Generation.");
                    pbbAIS.setValue((int) (valueForProgressBar * 100));
                }
            }            
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtAISCurrently.setText("Computation Complete.");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }
    }

    private void GSA() {
        boolean enterOrNot = true;
        EAOrNN = 7;
        int alpha = 20;
        double epsilon = 0.4;
        double GravitationalConstant = 100;

        pbGSA.setValue(0);
        int wokring = 0;

        if (!comparing) {
            funtionValue = (cbbGSAFunction.getSelectedIndex() + 2);
            try {
                sizeofRuns = (Integer.parseInt(txtGSARuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Total iterations to run box:", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofGenerations = (Integer.parseInt(txtGSAGen.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                epsilon = (Double.valueOf(txtGSAEpsilon.getText()));
                if (epsilon < 0 || epsilon > 1) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive number between 0 and 1 in the Epsilon text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                GravitationalConstant = (Double.valueOf(txtGSAGravity.getText()));
                if (GravitationalConstant < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive number in the Gravitational Constant text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                alpha = (Integer.parseInt(txtGSAAlpha.getText()));
                if (alpha < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Alpha text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }
        
        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        double currectT;
            
        for (int avgBest = 0; avgBest < sizeofRuns && enterOrNot; avgBest++) {
            ComputeCost parentsComputations = new ComputeCost();

            double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();

            double best;
            double worst;

            int maximumValueX;
            int minimumValueX;
            int maximumValueY;
            int minimumValueY;
            int rangeValue = 100;

            if (funtionValue == 2) {
                maximumValueX = 200;
                minimumValueX = -200;
                maximumValueY = 300;
                minimumValueY = -100;
            } else if (funtionValue == 4) {
                maximumValueX = 100;
                maximumValueY = 500;
                minimumValueX = -100;
                minimumValueY = -500;
            } else if (funtionValue == 5) {
                maximumValueX = 200;
                maximumValueY = 100;
                minimumValueX = -200;
                minimumValueY = -100;
            } else {
                maximumValueX = 400;
                maximumValueY = 400;
                minimumValueX = -400;
                minimumValueY = -400;
            }

            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            parentsComputations.AddStates(setPair1X, setPair1Y);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            parentsComputations.AddStates(setPair2X, setPair2Y);

            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            parentsComputations.AddStates(setPair3X, setPair3Y);

            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
            parentsComputations.AddStates(setPair4X, setPair4Y);

            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            parentsComputations.AddStates(setPair5X, setPair5Y);

            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            parentsComputations.AddStates(setPair6X, setPair6Y);

            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            parentsComputations.AddStates(setPair7X, setPair7Y);

            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            parentsComputations.AddStates(setPair8X, setPair8Y);

            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            parentsComputations.AddStates(setPair9X, setPair9Y);

            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtGSAPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            parentsComputations.AddStates(setPair10X, setPair10Y);

            double velocity[][] = new double[2][10];

            for (int i = 0; i < 10; i++) {
                velocity[0][i] = 0;
                velocity[1][i] = 0;
            }

            for (int count = 0; count < sizeofGenerations; count++) {

                double temp[];

                temp = parentsComputations.getTheBiggestWithIndex(funtionValue);
                best = temp[0];

                temp = parentsComputations.getTheSmallestWithIndex(funtionValue);
                worst = temp[0];

                double GravitationalConstantNew = GravitationalConstant * Math.exp(-1 * (double) alpha * (double) ((double) count / (double) sizeofGenerations));

                double forceX[][] = new double[10][10];
                double forceY[][] = new double[10][10];
                double massInertia[] = new double[10];
                double massGravitational[] = new double[10];
                double totalInertia = 0;

                for (int i = 0; i < 10; i++) {
                    double num = parentsComputations.getStates(i).getCost(funtionValue) - worst;

                    if (num == 0) {
                        num = 0.000005;
                    }

                    double den = best - worst;

                    if (den == 0) {
                        den = 0.000005;
                    }

                    massInertia[i] = num / den;
                    totalInertia += massInertia[i];
                }

                for (int i = 0; i < 10; i++) {
                    massGravitational[i] = massInertia[i] / totalInertia;
                }

                for (int i = 0; i < 10; i++) {
                    for (int j = 0; j < 10; j++) {
                        if (i != j) {
                            double den = parentsComputations.getDistance(i, j, 1) + epsilon;
                            double num = GravitationalConstantNew * massGravitational[i] * massGravitational[j];

                            forceX[i][j] = (num / den) * (parentsComputations.getStates(j).getValueofX() - parentsComputations.getStates(i).getValueofX());
                            forceY[i][j] = (num / den) * (parentsComputations.getStates(j).getValueofY() - parentsComputations.getStates(i).getValueofY());
                        }
                    }
                }

                double accelerate[][] = new double[2][10];

                for (int i = 0; i < 10; i++) {
                    double sumX = 0;
                    double sumY = 0;

                    //remember to change this into KBest as suggested in the paper
                    for (int j = 0; j < 10; j++) {
                        if (i != j) {
                            sumX += ((getARandomNumberBetween(0, 100) / 100) * forceX[i][j]);
                            sumY += ((getARandomNumberBetween(0, 100) / 100) * forceY[i][j]);
                        }
                    }

                    accelerate[0][i] = sumX / massGravitational[i];
                    accelerate[1][i] = sumY / massGravitational[i];

                    velocity[0][i] = accelerate[0][i] + ((getARandomNumberBetween(0, 100) / 100) * velocity[0][i]);
                    velocity[1][i] = accelerate[1][i] + ((getARandomNumberBetween(0, 100) / 100) * velocity[1][i]);

                    double tempX = parentsComputations.getStates(i).getValueofX();
                    double tempY = parentsComputations.getStates(i).getValueofY();

                    if ((tempX + velocity[0][i]) > ((double) maximumValueX / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofX(((double) maximumValueX / (double) rangeValue));
                    } else if ((tempX + velocity[0][i]) < ((double) minimumValueX / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofX(((double) minimumValueX / (double) rangeValue));
                    } else {
                        parentsComputations.getStates(i).setValueofX(tempX + velocity[0][i]);
                    }
                    
                      if ((tempY + velocity[1][i]) > ((double) maximumValueY / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofY(((double) maximumValueY / (double) rangeValue));
                    } else if ((tempY + velocity[1][i]) < ((double) minimumValueY / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofY(((double) minimumValueY / (double) rangeValue));
                    } else {
                        parentsComputations.getStates(i).setValueofY(tempY + velocity[1][i]);
                    }
                }

                temp = parentsComputations.getTheBiggestWithIndex(funtionValue);

                generationsCount[avgBest][count] = temp[0];
                
                if(temp[0] > maximumValue){
                    maximumValue = temp[0];
                    maxTValue = System.currentTimeMillis();
                }

                
                double val = 0;
                int sizeOfSwarm = parentsComputations.getListSize();
                for (int k = 0; k < sizeOfSwarm; k++) {
                    val += parentsComputations.getCostOfXandY(k, funtionValue);
                }
                avggenerationsFitness[avgBest][count] = (val / sizeOfSwarm);
                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtGSAComputing.setText("Currently computing: " + avgBest + " Run. " + count + " Generation.");
                    pbGSA.setValue((int) (valueForProgressBar * 100));
                }
            }
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtGSAComputing.setText("Computation Complete.");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }
    }
    
    private void IGOA() {
        boolean enterOrNot = true;
        EAOrNN = 8;
        int populationB = 5;
        int populationC = 5;
        int sampleC = 4;
        int sizeRandom = 4;
        funtionValue = 4;
        
        int alpha = 20;
        double epsilon = 0.4;
        double GravitationalConstant = 100;

        pbGSA.setValue(0);
        int wokring = 0;

        if (!comparing) {
            funtionValue = (cbbIGOAFunction.getSelectedIndex() + 2);
            try {
                sizeofRuns = (Integer.parseInt(txtIGOARuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Total iterations to run box:", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofGenerations = (Integer.parseInt(txtIGOAGen.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Individuals text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                epsilon = (Double.valueOf(txtIGOAEpsilon.getText()));
                if ( epsilon< 0 || epsilon> 1) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive number between 0 and 1 in the Epsilon text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                GravitationalConstant = (Double.valueOf(txtIGOAGravity.getText()));
                if (GravitationalConstant < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive number in the Gravitational Constant text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                alpha = (Integer.parseInt(txtIGOAAlpha.getText()));
                if (alpha < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Alpha text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                populationB = (Integer.parseInt(txtIGOAPopB.getText()));
                if (populationB < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Population B text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                populationC = (Integer.parseInt(txtIGOAPopC.getText()));
                if (populationC < 0) {
                    throw new IOException();
                }

            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Population C text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        } else {
            funtionValue = (cbbCAFunction.getSelectedIndex() + 2);
            try {
                sizeofGenerations = (Integer.parseInt(txtCompareGens.getText()));
                if (sizeofGenerations < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the Generations text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }

            try {
                sizeofRuns = (Integer.parseInt(txtCompareRuns.getText()));
                if (sizeofRuns < 0) {
                    throw new IOException();
                }
            } catch (NumberFormatException | IOException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in the total Runs text box", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                enterOrNot = false;
            }
        }
        
        generationsCount = new double[sizeofRuns][sizeofGenerations];
        avggenerationsFitness = new double[sizeofRuns][sizeofGenerations];
        double currectT;
            
        for (int avgBest = 0; avgBest < sizeofRuns && enterOrNot; avgBest++) {
            ComputeCost parentsComputations = new ComputeCost();
            
            double maxTValue = 0;
            double maximumValue = -99999999;
            currectT = System.currentTimeMillis();


            double best;
            double worst;

            int maximumValueX;
            int minimumValueX;
            int maximumValueY;
            int minimumValueY;
            int rangeValue = 100;

            if (funtionValue == 2) {
                maximumValueX = 200;
                minimumValueX = -200;
                maximumValueY = 300;
                minimumValueY = -100;
            } else if (funtionValue == 4) {
                maximumValueX = 100;
                maximumValueY = 500;
                minimumValueX = -100;
                minimumValueY = -500;
            } else if (funtionValue == 5) {
                maximumValueX = 200;
                maximumValueY = 100;
                minimumValueX = -200;
                minimumValueY = -100;
            } else {
                maximumValueX = 400;
                maximumValueY = 400;
                minimumValueX = -400;
                minimumValueY = -400;
            }

            double setPair1X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair1Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair1.setText(" (" + String.valueOf(setPair1X) + ", " + String.valueOf(setPair1Y) + ") ");
            parentsComputations.AddStates(setPair1X, setPair1Y);

            double setPair2X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair2Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair2.setText(" (" + String.valueOf(setPair2X) + ", " + String.valueOf(setPair2Y) + ") ");
            parentsComputations.AddStates(setPair2X, setPair2Y);

            double setPair3X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair3Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair3.setText(" (" + String.valueOf(setPair3X) + ", " + String.valueOf(setPair3Y) + ") ");
            parentsComputations.AddStates(setPair3X, setPair3Y);

            double setPair4X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair4Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair4.setText(" (" + String.valueOf(setPair4X) + ", " + String.valueOf(setPair4Y) + ") ");
            parentsComputations.AddStates(setPair4X, setPair4Y);

            double setPair5X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair5Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair5.setText(" (" + String.valueOf(setPair5X) + ", " + String.valueOf(setPair5Y) + ") ");
            parentsComputations.AddStates(setPair5X, setPair5Y);

            double setPair6X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair6Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair6.setText(" (" + String.valueOf(setPair6X) + ", " + String.valueOf(setPair6Y) + ") ");
            parentsComputations.AddStates(setPair6X, setPair6Y);

            double setPair7X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair7Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair7.setText(" (" + String.valueOf(setPair7X) + ", " + String.valueOf(setPair7Y) + ") ");
            parentsComputations.AddStates(setPair7X, setPair7Y);

            double setPair8X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair8Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair8.setText(" (" + String.valueOf(setPair8X) + ", " + String.valueOf(setPair8Y) + ") ");
            parentsComputations.AddStates(setPair8X, setPair8Y);

            double setPair9X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair9Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair9.setText(" (" + String.valueOf(setPair9X) + ", " + String.valueOf(setPair9Y) + ") ");
            parentsComputations.AddStates(setPair9X, setPair9Y);

            double setPair10X = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
            double setPair10Y = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
            txtIGSOPair10.setText(" (" + String.valueOf(setPair10X) + ", " + String.valueOf(setPair10Y) + ") ");
            parentsComputations.AddStates(setPair10X, setPair10Y);

            double velocity[][] = new double[2][10];

            for (int i = 0; i < 10; i++) {
                velocity[0][i] = 0;
                velocity[1][i] = 0;
            }
            
            Cost GBest = new Cost();

            for (int count = 0; count < sizeofGenerations; count++) {

                double temp[];

                temp = parentsComputations.getTheBiggestWithIndex(funtionValue);
                
                double tempX = parentsComputations.getStates((int) temp[1]).getValueofX();
                double tempY = parentsComputations.getStates((int) temp[1]).getValueofY();

                Cost LBest = new Cost(tempX, tempY);

                if (count == 0) {
                    GBest.setValueofX(LBest.getValueofX());
                    GBest.setValueofY(LBest.getValueofY());
                } else if (LBest.getCost(funtionValue) > GBest.getCost(funtionValue)) {
                    GBest.setValueofX(LBest.getValueofX());
                    GBest.setValueofY(LBest.getValueofY());
                }
                
                int populationBk[];

                if (cmbSubsetSelection.getSelectedIndex() == 0) {
                    populationBk = parentsComputations.subsetAISFitnessBased(populationB, funtionValue);
                } else {
                    parentsComputations.sortTheSetsOnFitnessValue(funtionValue);
                    populationBk = parentsComputations.subsetAISRankedBased(populationB);
                }

                ComputeCost F1 = new ComputeCost();

                for (int i = 0; i < populationB; i++) {
                    F1.AddStates(parentsComputations.getStates(populationBk[i]).getValueofX(), parentsComputations.getStates(populationBk[i]).getValueofY());
                }

                int populationCk[];

                if (cmbSubsetSelection.getSelectedIndex() == 0) {
                    populationCk = F1.subsetAISFitnessBased(populationC, funtionValue);
                } else {
                    F1.sortTheSetsOnFitnessValue(funtionValue);
                    populationCk = F1.subsetAISRankedBased(populationC);
                }

                ComputeCost F = new ComputeCost();

                for (int i = 0; i < populationC; i++) {
                    F.AddStates(parentsComputations.getStates(populationCk[i]).getValueofX(), parentsComputations.getStates(populationCk[i]).getValueofY());
                }

                for (int i = 0; i < populationC; i++) {

                    Cost parent1 = new Cost(F.getStates(i).getValueofX(), F.getStates(i).getValueofY());

                    ExplorationAndExploitation expoExploi = new ExplorationAndExploitation(parent1);

                    expoExploi.AISMutation(((double) maximumValueX / (double) rangeValue), ((double) minimumValueX / (double) rangeValue), ((double) maximumValueY / (double) rangeValue), ((double) minimumValueY / (double) rangeValue), funtionValue);

                    F.AddStates(expoExploi.newParent1().getValueofX(), expoExploi.newParent1().getValueofY());
                }

                F.sortTheSetsOnFitnessValue(funtionValue);
                F.useTruncationForSurvivalSelection(populationC - sampleC);
                int loopSize = F.getListSize();
                
                for (int i = 0; i < loopSize; i++) {
                    parentsComputations.AddStates(F.getStates(i).getValueofX(), F.getStates(i).getValueofY());
                }

                for (int i = 0; i < sizeRandom; i++) {

                    double randomPairX = (getARandomNumberBetween(minimumValueX, maximumValueX)) / rangeValue;
                    double randomPairY = (getARandomNumberBetween(minimumValueY, maximumValueY)) / rangeValue;
                    parentsComputations.AddStates(randomPairX, randomPairY);
                }

                parentsComputations.sortTheSetsOnFitnessValue(funtionValue);

                parentsComputations.useTruncationForSurvivalSelection(loopSize + sizeRandom);
///////////////////////////////////////////////////////////////
                temp = parentsComputations.getTheBiggestWithIndex(funtionValue);
                best = temp[0];
                
                temp = parentsComputations.getTheSmallestWithIndex(funtionValue);
                worst = temp[0];

                double GravitationalConstantNew = GravitationalConstant * Math.exp(-1 * (double) alpha * (double) ((double) count / (double) sizeofGenerations));

                double forceX[][] = new double[10][10];
                double forceY[][] = new double[10][10];
                double massInertia[] = new double[10];
                double massGravitational[] = new double[10];
                double totalInertia = 0;

                for (int i = 0; i < 10; i++) {
                    double num = parentsComputations.getStates(i).getCost(funtionValue) - worst;

                    if (num == 0) {
                        num = 0.000005;
                    }

                    double den = best - worst;

                    if (den == 0) {
                        den = 0.000005;
                    }

                    massInertia[i] = num / den;
                    totalInertia += massInertia[i];
                }

                for (int i = 0; i < 10; i++) {
                    massGravitational[i] = massInertia[i] / totalInertia;
                }

                for (int i = 0; i < 10; i++) {
                    for (int j = 0; j < 10; j++) {
                        if (i != j) {
                            double den = parentsComputations.getDistance(i, j, 1) + epsilon;
                            double num = GravitationalConstantNew * massGravitational[i] * massGravitational[j];

                            forceX[i][j] = (num / den) * (parentsComputations.getStates(j).getValueofX() - parentsComputations.getStates(i).getValueofX());
                            forceY[i][j] = (num / den) * (parentsComputations.getStates(j).getValueofY() - parentsComputations.getStates(i).getValueofY());
                        }
                    }
                }

                double accelerate[][] = new double[2][10];

                for (int i = 0; i < 10; i++) {
                    double sumX = 0;
                    double sumY = 0;

                    //remember to change this into KBest as suggested in the paper
                    for (int j = 0; j < 10; j++) {
                        if (i != j) {
                            sumX += ((getARandomNumberBetween(0, 100) / 100) * forceX[i][j]);
                            sumY += ((getARandomNumberBetween(0, 100) / 100) * forceY[i][j]);
                        }
                    }

                    accelerate[0][i] = sumX / massGravitational[i];
                    accelerate[1][i] = sumY / massGravitational[i];

                    velocity[0][i] = accelerate[0][i] + ((getARandomNumberBetween(0, 100) / 100) * velocity[0][i]);
                    velocity[1][i] = accelerate[1][i] + ((getARandomNumberBetween(0, 100) / 100) * velocity[1][i]);

                    tempX = parentsComputations.getStates(i).getValueofX();
                    tempY = parentsComputations.getStates(i).getValueofY();

                    if ((tempX + velocity[0][i]) > ((double) maximumValueX / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofX(((double) maximumValueX / (double) rangeValue));
                    } else if ((tempX + velocity[0][i]) < ((double) minimumValueX / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofX(((double) minimumValueX / (double) rangeValue));
                    } else {
                        parentsComputations.getStates(i).setValueofX(tempX + velocity[0][i]);
                    }
                    
                      if ((tempY + velocity[1][i]) > ((double) maximumValueY / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofY(((double) maximumValueY / (double) rangeValue));
                    } else if ((tempY + velocity[1][i]) < ((double) minimumValueY / (double) rangeValue)) {
                        parentsComputations.getStates(i).setValueofY(((double) minimumValueY / (double) rangeValue));
                    } else {
                        parentsComputations.getStates(i).setValueofY(tempY + velocity[1][i]);
                    }
                }

                temp = parentsComputations.getTheBiggestWithIndex(funtionValue);

                generationsCount[avgBest][count] = temp[0];

                if(temp[0] > maximumValue){
                    maximumValue = temp[0];
                    maxTValue = System.currentTimeMillis();
                }

                
                double val = 0;
                int sizeOfSwarm = parentsComputations.getListSize();
                for (int k = 0; k < sizeOfSwarm; k++) {
                    val += parentsComputations.getCostOfXandY(k, funtionValue);
                }
                avggenerationsFitness[avgBest][count] = (val / sizeOfSwarm);
                wokring++;
                double denominatorForProgressBar = (double) sizeofGenerations * (double) sizeofRuns;
                double valueForProgressBar = (double) wokring / denominatorForProgressBar;

                if (comparing) {
                    pgCA.setValue((int) (valueForProgressBar * 100));
                } else {
                    txtIGOAComputing.setText("Currently computing: " + avgBest + " Run. " + count + " Generation.");
                    pbIGOA.setValue((int) (valueForProgressBar * 100));
                }
            }
            totalTime+=(maxTValue - currectT);
        }

        System.out.println((totalTime)/sizeofRuns+" ms");
        totalTime = 0;
        
        if (comparing) {
            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += generationsCount[j][i];
                }
                compareAllGenerationsCount[compareIndex][i] = (temp / sizeofRuns);
            }

            for (int i = 0; i < sizeofGenerations; i++) {
                double temp = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    temp += avggenerationsFitness[j][i];
                }
                compareAllavggenerationsFitness[compareIndex][i] = (temp / sizeofRuns);
            }
        } else {
            txtIGOAComputing.setText("Computation Complete.");
            LetsPopulateTheSecondTable();
            LetsPopulateTheTable();
        }
    }

    private void neuralNetworkWorking() {
        BufferedReader br = null;
        EAOrNN = 1;
        String line;
        String cvsSplitBy = ",";
        NeuralNetword training = new NeuralNetword();
        NeuralNetword shuffled = new NeuralNetword();
        boolean inOrNot = true;

        try {
            br = new BufferedReader(new FileReader(theDatabaseForNN));
            while ((line = br.readLine()) != null) {
                String[] country = line.split(cvsSplitBy);
                double X1 = Double.valueOf(country[0]);
                double X2 = Double.valueOf(country[1]);
                double X3 = Double.valueOf(country[2]);
                double Y = Double.parseDouble(country[3]);

                training.AddNodes(X1, X2, X3, Y);
                shuffled.AddNodes(X1, X2, X3, Y);
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Please select a valid file", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
            inOrNot = false;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Please select a valid file", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
            inOrNot = false;
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                }
            }
        }

        int indexNNandBACK;
        sizeofGenerations = 700;
        sizeofRuns = 700;
        int n = 2;
        int epochLimit = 200;
        double r = 0.6;
        int fortraining = (int) (training.getNetworkSize() * 0.7);
        double thresholdForTer = 0.3;
        int swapAt = 2;
        int generation = 300;
        double mut = 1.3;

        if (cmbNNTechnique.getSelectedIndex() == 0) {
            indexNNandBACK = 0;

            try {
                n = (Integer.parseInt(txtNoOfNeurons.getText()));
                if (n < 1) {
                    throw new FileNotFoundException();
                }
            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive Integer for number of neurons", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                epochLimit = (Integer.parseInt(txtEpochs.getText()));
                sizeofRuns = epochLimit;
                if (epochLimit < 1) {
                    throw new FileNotFoundException();
                }
            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive Integer for numberof epochs", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                thresholdForTer = (Double.valueOf(txtErrorAcceptance.getText()));
                if (thresholdForTer > 1 || thresholdForTer < 0) {
                    throw new FileNotFoundException();
                }

            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer for threshold", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                double ratio = Double.valueOf(txtRatio.getText());

                if (ratio > 1 || ratio < 0) {
                    throw new FileNotFoundException();
                }

                fortraining = (int) (training.getNetworkSize() * ratio);

            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a value between 0 and 1 for training ratio", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                r = (Double.valueOf(txtLearningRate.getText()));

                if (r > 1 || r < 0) {
                    throw new FileNotFoundException();
                }
            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a value between 0 and 1 for learning rate", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }
        } else {

            indexNNandBACK = 1;

            try {
                n = (Integer.parseInt(txtNoOfNeurons.getText()));
                if (n < 1) {
                    throw new FileNotFoundException();
                }
            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive Integer for number of neurons", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                swapAt = (Integer.parseInt(txtNNCrossOver.getText()));
                if (swapAt < 1 || swapAt > (n * 4)) {
                    throw new FileNotFoundException();
                }
            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive Integer for number of neurons", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                generation = (Integer.parseInt(txtNNGenerations.getText()));
                if (generation < 1) {
                    throw new FileNotFoundException();
                }
                sizeofGenerations = generation;
            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive integer in number of generations", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                mut = (Double.valueOf(txtNNMutation.getText()));
                if (mut < 0) {
                    throw new FileNotFoundException();
                }

            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a positive number for mutation", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }

            try {
                double ratio = Double.valueOf(txtRatio.getText());

                if (ratio > 1 || ratio < 0) {
                    throw new FileNotFoundException();
                }

                fortraining = (int) (training.getNetworkSize() * ratio);

            } catch (NumberFormatException | FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Please enter a value between 0 and 1 for training ratio", "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                inOrNot = false;
            }
        }

        if (inOrNot) {
            sizeOfFile = shuffled.getNetworkSize();
            valuesOfY = new double[2][sizeOfFile];

            int a = n * 4;
            for (int i = shuffled.getNetworkSize() - 1; i > fortraining; i--) {
                shuffled.removeNode(i);
            }

            shuffled.shuffleTheList();
            int currectT = (int) System.currentTimeMillis();
            double[] weights = new double[a];
            int valuePB = 0;

            if (cmbNNTechnique.getSelectedIndex() == 0) {

                int k;

                for (int i = 0; i < a; i++) {
                    weights[i] = getARandomNumberBetween(-500, 500) / 100;
                }
                int epochNumber = 1;

                double ValueAtY;
                double SSE;

                do {
                    lblEpochNumber.setText("Calculating Epoch number: " + String.valueOf(epochNumber));

                    SSE = 0;
                    for (k = 0; k < fortraining; k++) {

                        double[] X = shuffled.getNodes(k).getX();
                        double Y = shuffled.getNodes(k).getY();

                        double max = shuffled.getTheBiggest();
                        double min = shuffled.getTheSmallest();

                        X[0] = (X[0] - min) / (max - min);
                        X[1] = (X[1] - min) / (max - min);
                        X[2] = (X[2] - min) / (max - min);
                        Y = (Y - min) / (max - min);

                        int i = weights.length;
                        double[] results;

                        do {
                            results = shuffled.trainWithBackpropagation(weights, n, X, r, Y);
                            ValueAtY = results[i];
                            calculateTimeTaken(currectT);
                        } while ((ValueAtY - Y) > (thresholdForTer / (double) fortraining));

                        for (i = 0; i < weights.length; i++) {
                            weights[i] = results[i];
                        }

                        SSE += (Math.pow(ValueAtY - Y, 2));

                        double total = (double) valuePB / ((double) epochLimit + (double) shuffled.getNetworkSize());
                        pbTotalEpochsShow.setValue((int) (total * 100));
                    }
                    epochNumber++;
                    valuePB++;
                } while (epochNumber < epochLimit && SSE > thresholdForTer);

                lblEpochNumber.setText("Epochs Calculated. Finalizating results based on weights");

            } else {
                LinkedList<double[]> listOfPossibilites = new LinkedList<>();

                for (int i = 0; i < 10; i++) {
                    double[] randWeights = new double[a];
                    for (int j = 0; j < a; j++) {
                        randWeights[j] = getARandomNumberBetween(-500, 500) / 100;
                    }
                    listOfPossibilites.add(randWeights);
                }
                int gen = 1;
                int k;
                LinkedList<Double> SSE = new LinkedList<>();

                for (double[] listOfPossibilite : listOfPossibilites) {
                    double currentSSE = 0;
                    for (k = 0; k < fortraining; k++) {
                        calculateTimeTaken(currectT);
                        double[] X = shuffled.getNodes(k).getX();
                        double Y = shuffled.getNodes(k).getY();
                        double max = shuffled.getTheBiggest();
                        double min = shuffled.getTheSmallest();
                        X[0] = (X[0] - min) / (max - min);
                        X[1] = (X[1] - min) / (max - min);
                        X[2] = (X[2] - min) / (max - min);
                        Y = (Y - min) / (max - min);
                        double ValueAtY = shuffled.finalValueOfY(listOfPossibilite, X, n);
                        currentSSE += (Math.pow(ValueAtY - Y, 2));
                    }
                    SSE.add(currentSSE);
                }

                double prevbestSSE = 0;

                do {
                    lblEpochNumber.setText("Calculating Generation number: " + String.valueOf(gen));

                    int sizeOfOffspring = listOfPossibilites.size() / 2;

                    LinkedList<double[]> listOffspring = new LinkedList<>();

                    for (int i = 0; i < sizeOfOffspring; i++) {
                        int[] parentsChosen = new int[2];
                        calculateTimeTaken(currectT);

                        try {
                            parentsChosen = shuffled.useFitnessProportionSchemeMethod(SSE);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR! ", JOptionPane.INFORMATION_MESSAGE);
                        }

                        double[] parent1 = new double[a];
                        double[] parent2 = new double[a];

                        for (int l = 0; l < a; l++) {
                            parent1[l] = listOfPossibilites.get(parentsChosen[0])[l];
                            parent2[l] = listOfPossibilites.get(parentsChosen[1])[l];
                        }
                        EENN expoExploi = new EENN(parent1, parent2);
                        expoExploi.crossOverOfTwoParent(mut, swapAt);
                        listOffspring.add(expoExploi.newParent1());
                        listOffspring.add(expoExploi.newParent2());
                    }

                    for (double[] listOffspring1 : listOffspring) {
                        listOfPossibilites.add(listOffspring1);
                    }

                    SSE.clear();

                    for (double[] listOfPossibilite : listOfPossibilites) {
                        double currentSSE = 0;
                        for (k = 0; k < fortraining; k++) {
                            calculateTimeTaken(currectT);
                            double[] X = shuffled.getNodes(k).getX();
                            double Y = shuffled.getNodes(k).getY();
                            double max = shuffled.getTheBiggest();
                            double min = shuffled.getTheSmallest();
                            X[0] = (X[0] - min) / (max - min);
                            X[1] = (X[1] - min) / (max - min);
                            X[2] = (X[2] - min) / (max - min);
                            Y = (Y - min) / (max - min);
                            double ValueAtY = shuffled.finalValueOfY(listOfPossibilite, X, n);
                            currentSSE += (Math.pow(ValueAtY - Y, 2));
                        }
                        SSE.add(currentSSE);
                    }

                    SurvivalSelectionAlgorithms algo = new SurvivalSelectionAlgorithms();
                    algo.sortAndTruncate(listOfPossibilites, SSE);

                    System.arraycopy(listOfPossibilites.get(0), 0, weights, 0, weights.length);

                    double total = (double) valuePB / ((double) generation + (double) shuffled.getNetworkSize());
                    pbTotalEpochsShow.setValue((int) (total * 100));

                    if (gen % 35 == 0) {
                        double bestSSE = SSE.get(0);

                        if (prevbestSSE == bestSSE) {
                            break;
                        } else {
                            prevbestSSE = bestSSE;
                        }
                    }

                    gen++;
                    valuePB++;
                } while (gen < generation);
                lblEpochNumber.setText("Generations executed. Finalizating results based on weights");
            }

            System.out.println(calculateTimeTaken(currectT) + " " + thresholdForTer + " " + generation);

            for (int k = 0; k < training.getNetworkSize(); k++) {
                double[] X = training.getNodes(k).getX();

                double max = training.getTheBiggest();
                double min = training.getTheSmallest();

                X[0] = (X[0] - min) / (max - min);
                X[1] = (X[1] - min) / (max - min);
                X[2] = (X[2] - min) / (max - min);

                if (comparing) {
                    compareNNEAANDBACK[indexNNandBACK][k] = training.finalValueOfY(weights, X, n);
                    compareNNEAANDBACK[indexNNandBACK][k] = (compareNNEAANDBACK[indexNNandBACK][k]) * (max - min) + min;
                    compareNNEAANDBACK[2][k] = training.getNodes(k).getY();
                } else {
                    valuesOfY[0][k] = training.finalValueOfY(weights, X, n);
                    valuesOfY[0][k] = (valuesOfY[0][k]) * (max - min) + min;
                    valuesOfY[1][k] = training.getNodes(k).getY();
                }

                calculateTimeTaken(currectT);

                valuePB++;
                double total;

                if (cmbNNTechnique.getSelectedIndex() == 0) {
                    total = (double) valuePB / ((double) epochLimit + (double) training.getNetworkSize());
                } else {
                    total = (double) valuePB / ((double) generation + (double) training.getNetworkSize());
                }
                pbTotalEpochsShow.setValue((int) (total * 100));
            }

            lblEpochNumber.setText("Computation Complete");
            pbTotalEpochsShow.setValue(100);
        }

        if (!comparing) {
            LetsPopulateTheTable();
        }
    }

    private void LetsPopulateTheTable() {
        DefaultTableModel model = (DefaultTableModel) tblSetValuesGottenFrom.getModel();
        model.setColumnCount(0);
        model.setRowCount(0);

        if (EAOrNN > 1) {
            txtTable1Name.setText("Best so far details");
            model.addColumn("Gen/Run #");

            for (int i = 0; i < sizeofRuns; i++) {
                model.addColumn(i + 1);
            }

            model.addColumn("Average");
            for (int i = 0; i < sizeofGenerations; i++) {
                List<String> values = new ArrayList<>();
                values.add(String.valueOf(i + 1));
                double val = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    values.add(String.valueOf(generationsCount[j][i]));
                    val += generationsCount[j][i];
                }
                val /= (double) sizeofRuns;
                String average = String.valueOf(val);
                values.add(average);
                Object[] row = values.toArray();
                model.addRow(row);
            }
        } else {
            txtTable1Name.setText("The Actual and the Predicted values");

            model.addColumn("Day #");

            model.addColumn("Predicted Value");
            model.addColumn("Actual Value");
            model.addColumn("Absolute Difference");

            for (int i = 0; i < sizeOfFile; i++) {
                List<String> values = new ArrayList<>();

                values.add(String.valueOf(i + 1));
                values.add(String.valueOf(valuesOfY[0][i]));

                values.add(String.valueOf(valuesOfY[1][i]));

                values.add(String.valueOf(Math.abs(valuesOfY[1][i] - valuesOfY[0][i])));
                Object[] row = values.toArray();
                model.addRow(row);
            }
        }

        tbpTabs.setSelectedIndex(tbpTabs.getTabCount()-2);
    }

    private void LetsPopulateTheSecondTable() {
        DefaultTableModel model = (DefaultTableModel) tableAverageFitnessOfEachGeneration.getModel();
        model.setColumnCount(0);
        model.setRowCount(0);

        if (EAOrNN > 1) {
            txtTable2Name.setText("Average fitness details");

            model.addColumn("Gen/Run #");

            for (int i = 0; i < sizeofRuns; i++) {
                model.addColumn(i + 1);
            }
            model.addColumn("Average");
            for (int i = 0; i < sizeofGenerations; i++) {
                List<String> values = new ArrayList<>();
                values.add(String.valueOf(i + 1));
                double val = 0;
                for (int j = 0; j < sizeofRuns; j++) {
                    values.add(String.valueOf(avggenerationsFitness[j][i]));
                    val += avggenerationsFitness[j][i];
                }
                val /= (double) sizeofRuns;
                String average = String.valueOf(val);
                values.add(average);
                Object[] row = values.toArray();
                model.addRow(row);
            }
        }

    }

    private void comparingGraphShow() {
        double lowerDomain = 50000000;
        double upperDomain = -50000000;
        int trackKeeper = compareIndex;

        String series1Name = "Artificial Immune System";
        String series2Name = "Brain Storming Optimization";
        String series3Name = "Partical Swarm Optimization";
        String series4Name = "Firefly Algorithm";
        String series5Name = "Evolutionary Programming";
        String series6Name = "Evolutionary Algorithm: " + cbbPSEA.getSelectedItem().toString() + " and " + cbbSSEA.getSelectedItem().toString();
        String series7Name = "Gravitational Search Algorithm";
        String series8Name = "Immune Gravitation Inspired";

        LinkedList<LineAtrributes> listOfSeriesToAdd = new LinkedList<>();

        XYSeries series1;
        boolean series1Shape;
        boolean series1Line;
        LineAtrributes lineSeries1;

        if (ckbAIS.isSelected()) {
            series1 = new XYSeries(series1Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series1.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }
            series1Shape = false;
            series1Line = true;

            lineSeries1 = new LineAtrributes(series1, series1Line, series1Shape);
            listOfSeriesToAdd.add(lineSeries1);
            trackKeeper--;
        }

        XYSeries series2;
        boolean series2Shape;
        boolean series2Line;
        LineAtrributes lineSeries2;

        if (ckbBSO.isSelected()) {
            series2 = new XYSeries(series2Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series2.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }
            series2Shape = false;
            series2Line = true;

            lineSeries2 = new LineAtrributes(series2, series2Line, series2Shape);
            listOfSeriesToAdd.add(lineSeries2);
            trackKeeper--;
        }

        XYSeries series3;
        boolean series3Shape;
        boolean series3Line;
        LineAtrributes lineSeries3;

        if (ckbPSO.isSelected()) {
            series3 = new XYSeries(series3Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series3.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }

            series3Shape = false;
            series3Line = true;

            lineSeries3 = new LineAtrributes(series3, series3Line, series3Shape);
            listOfSeriesToAdd.add(lineSeries3);
            trackKeeper--;
        }

        XYSeries series4;
        boolean series4Shape;
        boolean series4Line;
        LineAtrributes lineSeries4;

        if (ckbFA.isSelected()) {
            series4 = new XYSeries(series4Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series4.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }
            series4Shape = false;
            series4Line = true;

            lineSeries4 = new LineAtrributes(series4, series4Line, series4Shape);
            listOfSeriesToAdd.add(lineSeries4);
            trackKeeper--;
        }

        XYSeries series5;
        boolean series5Shape;
        boolean series5Line;
        LineAtrributes lineSeries5;

        if (ckbEP.isSelected()) {
            series5 = new XYSeries(series5Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series5.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }

            series5Shape = false;
            series5Line = true;

            lineSeries5 = new LineAtrributes(series5, series5Line, series5Shape);
            listOfSeriesToAdd.add(lineSeries5);
            trackKeeper--;
        }

        XYSeries series6;
        boolean series6Shape;
        boolean series6Line;
        LineAtrributes lineSeries6;

        if (ckbEA.isSelected()) {

            series6 = new XYSeries(series6Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series6.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }

            series6Shape = false;
            series6Line = true;

            lineSeries6 = new LineAtrributes(series6, series6Line, series6Shape);
            listOfSeriesToAdd.add(lineSeries6);
            trackKeeper--;
        }
        
        XYSeries series7;
        boolean series7Shape;
        boolean series7Line;
        LineAtrributes lineSeries7;

        if (ckbGSA.isSelected()) {

            series7 = new XYSeries(series7Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series7.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }

            series7Shape = false;
            series7Line = true;

            lineSeries7 = new LineAtrributes(series7, series7Line, series7Shape);
            listOfSeriesToAdd.add(lineSeries7);
            trackKeeper--;
        }
        
        XYSeries series8;
        boolean series8Shape;
        boolean series8Line;
        LineAtrributes lineSeries8;

        if (ckbIGOA.isSelected()) {

            series8 = new XYSeries(series8Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series8.add(j, compareAllGenerationsCount[compareIndex - trackKeeper][j]);

                if (compareAllGenerationsCount[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                } else if (compareAllGenerationsCount[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllGenerationsCount[compareIndex - trackKeeper][j];
                }
            }

            series8Shape = false;
            series8Line = true;

            lineSeries8 = new LineAtrributes(series8, series8Line, series8Shape);
            listOfSeriesToAdd.add(lineSeries8);
            trackKeeper--;
        }

        LinkedList<String> nameOfAll = new LinkedList<>();
        nameOfAll.add("Graphical Representations");
        nameOfAll.add("Generations");
        nameOfAll.add("Fitness Value");
        LineChart demo = new LineChart("Comparing all algorithms - Best so Far", listOfSeriesToAdd, nameOfAll, lowerDomain, upperDomain);
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);

        lowerDomain = 50000000;
        upperDomain = -50000000;
        trackKeeper = compareIndex;

        listOfSeriesToAdd.clear();

        if (ckbAIS.isSelected()) {
            series1 = new XYSeries(series1Name);

            for (int j = 0; j < sizeofGenerations; j++) {
                series1.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }
            series1Shape = false;
            series1Line = true;

            lineSeries1 = new LineAtrributes(series1, series1Line, series1Shape);
            listOfSeriesToAdd.add(lineSeries1);
            trackKeeper--;
        }

        if (ckbBSO.isSelected()) {
            series2 = new XYSeries(series2Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series2.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }
            series2Shape = false;
            series2Line = true;

            lineSeries2 = new LineAtrributes(series2, series2Line, series2Shape);
            listOfSeriesToAdd.add(lineSeries2);
            trackKeeper--;
        }

        if (ckbPSO.isSelected()) {
            series3 = new XYSeries(series3Name);

            for (int j = 0; j < sizeofGenerations; j++) {
                series3.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }

            series3Shape = false;
            series3Line = true;

            lineSeries3 = new LineAtrributes(series3, series3Line, series3Shape);
            listOfSeriesToAdd.add(lineSeries3);
            trackKeeper--;
        }

        if (ckbFA.isSelected()) {
            series4 = new XYSeries(series4Name);

            for (int j = 0; j < sizeofGenerations; j++) {
                series4.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }
            series4Shape = false;
            series4Line = true;

            lineSeries4 = new LineAtrributes(series4, series4Line, series4Shape);
            listOfSeriesToAdd.add(lineSeries4);
            trackKeeper--;
        }

        if (ckbEP.isSelected()) {
            series5 = new XYSeries(series5Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series5.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }

            series5Shape = false;
            series5Line = true;

            lineSeries5 = new LineAtrributes(series5, series5Line, series5Shape);
            listOfSeriesToAdd.add(lineSeries5);
            trackKeeper--;

        }

        if (ckbEA.isSelected()) {
            series6 = new XYSeries(series6Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series6.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }

            series6Shape = false;
            series6Line = true;

            lineSeries6 = new LineAtrributes(series6, series6Line, series6Shape);
            listOfSeriesToAdd.add(lineSeries6);
            trackKeeper--;
        }

        if (ckbGSA.isSelected()) {
            series7 = new XYSeries(series7Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series7.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }

            series7Shape = false;
            series7Line = true;

            lineSeries7 = new LineAtrributes(series7, series7Line, series7Shape);
            listOfSeriesToAdd.add(lineSeries7);
            trackKeeper--;
        }

        if (ckbIGOA.isSelected()) {
            series8 = new XYSeries(series8Name);
            for (int j = 0; j < sizeofGenerations; j++) {
                series8.add(j, compareAllavggenerationsFitness[compareIndex - trackKeeper][j]);

                if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] > upperDomain) {
                    upperDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                } else if (compareAllavggenerationsFitness[compareIndex - trackKeeper][j] < lowerDomain) {
                    lowerDomain = compareAllavggenerationsFitness[compareIndex - trackKeeper][j];
                }
            }

            series8Shape = false;
            series8Line = true;

            lineSeries8 = new LineAtrributes(series8, series8Line, series8Shape);
            listOfSeriesToAdd.add(lineSeries8);
            trackKeeper--;
        }

        LinkedList<String> nameOfAll2 = new LinkedList<>();
        nameOfAll2.add("Graphical Representations");
        nameOfAll2.add("Generations");
        nameOfAll2.add("Fitness Value");
        LineChart demo2 = new LineChart("Comparing all algorithms - Average Average Fitness", listOfSeriesToAdd, nameOfAll2, lowerDomain, upperDomain);

        demo2.pack();
        RefineryUtilities.centerFrameOnScreen(demo2);
        demo2.setVisible(true);
    }

    private String calculateTimeTaken(int currectT) {
        int newT = ((int) System.currentTimeMillis() - currectT) / 1000;

        int hoursUsed = 0;
        int minitues = 0;

        while (newT > 3599) {
            hoursUsed++;
            newT -= 3600;
        }

        while (newT > 59) {
            minitues++;
            newT -= 60;
        }
        String hours;
        String mins;
        String secs;

        if (hoursUsed < 10) {
            hours = "0" + String.valueOf(hoursUsed);
        } else {
            hours = String.valueOf(hoursUsed);
        }

        if (minitues < 10) {
            mins = "0" + String.valueOf(minitues);
        } else {
            mins = String.valueOf(minitues);
        }

        if (newT < 10) {
            secs = "0" + String.valueOf(newT);
        } else {
            secs = String.valueOf(newT);
        }

        String whatToShow = "Time elapsed: " + hours + ":" + mins + ":" + secs;
        lblTimeElapsed.setText(whatToShow);
        return whatToShow;
    }

    public double sigMoid(double X) {
        return (1 / (1 + (Math.exp(-X))));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComputationalIntelligenceAlgorithmUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ComputationalIntelligenceAlgorithmUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbbAISFunction;
    private javax.swing.JComboBox cbbAlgorithmType;
    private javax.swing.JComboBox cbbBSOFunction;
    private javax.swing.JComboBox cbbCAFunction;
    private javax.swing.JComboBox cbbChooseFunction;
    private javax.swing.JComboBox cbbDistance;
    private javax.swing.JComboBox cbbFAFunction;
    private javax.swing.JComboBox cbbGSAFunction;
    private javax.swing.JComboBox cbbIGOAFunction;
    private javax.swing.JComboBox cbbPSEA;
    private javax.swing.JComboBox cbbPSOFunction;
    private javax.swing.JComboBox cbbParentSelection;
    private javax.swing.JComboBox cbbSSEA;
    private javax.swing.JComboBox cbbSSEP;
    private javax.swing.JComboBox cbbSurvivalSelection;
    private javax.swing.JCheckBox ckbAIS;
    private javax.swing.JCheckBox ckbBSO;
    private javax.swing.JCheckBox ckbEA;
    private javax.swing.JCheckBox ckbEP;
    private javax.swing.JCheckBox ckbFA;
    private javax.swing.JCheckBox ckbGSA;
    private javax.swing.JCheckBox ckbGaussian;
    private javax.swing.JCheckBox ckbIGOA;
    private javax.swing.JCheckBox ckbPSO;
    private javax.swing.JComboBox cmbNNTechnique;
    private javax.swing.JComboBox cmbSubsetSelection;
    private javax.swing.JComboBox cmbSubsetSelection1;
    private javax.swing.JButton cmdAIS;
    private javax.swing.JButton cmdBSO;
    private javax.swing.JButton cmdCompareAll;
    private javax.swing.JButton cmdCompareNN;
    private javax.swing.JButton cmdComputeNN;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFA;
    private javax.swing.JButton cmdFuntion2;
    private javax.swing.JButton cmdGenerateGraphs;
    private javax.swing.JButton cmdGravity;
    private javax.swing.JButton cmdRunPSO;
    private javax.swing.JButton cmdSelectFileForNN;
    private javax.swing.JButton cmdVaccinate;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpAIS;
    private javax.swing.JPanel jpBSO;
    private javax.swing.JPanel jpComparison;
    private javax.swing.JPanel jpEvolutionary;
    private javax.swing.JPanel jpNN;
    private javax.swing.JPanel jpPSO;
    private javax.swing.JPanel jpT1;
    private javax.swing.JPanel jpT2;
    private javax.swing.JLabel lblEpochNumber;
    private javax.swing.JLabel lblNameOfFile;
    private javax.swing.JLabel lblPair1;
    private javax.swing.JLabel lblPair10;
    private javax.swing.JLabel lblPair2;
    private javax.swing.JLabel lblPair3;
    private javax.swing.JLabel lblPair4;
    private javax.swing.JLabel lblPair5;
    private javax.swing.JLabel lblPair6;
    private javax.swing.JLabel lblPair7;
    private javax.swing.JLabel lblPair8;
    private javax.swing.JLabel lblPair9;
    private javax.swing.JLabel lblTimeElapsed;
    private javax.swing.JProgressBar pbBSO;
    private javax.swing.JProgressBar pbFA;
    private javax.swing.JProgressBar pbGSA;
    private javax.swing.JProgressBar pbIGOA;
    private javax.swing.JProgressBar pbProgression;
    private javax.swing.JProgressBar pbTotalEpochsShow;
    private javax.swing.JProgressBar pbbAIS;
    private javax.swing.JProgressBar pbbPSOAIS;
    private javax.swing.JProgressBar pgCA;
    private javax.swing.JTable tableAverageFitnessOfEachGeneration;
    private javax.swing.JTable tblSetValuesGottenFrom;
    private javax.swing.JTabbedPane tbpTabs;
    private javax.swing.JTextField txt5a;
    private javax.swing.JTextField txt6b;
    private javax.swing.JTextField txt6biii;
    private javax.swing.JTextField txt6c;
    private javax.swing.JLabel txtAISCurrently;
    private javax.swing.JTextField txtAISGenerations;
    private javax.swing.JLabel txtAISPair1;
    private javax.swing.JLabel txtAISPair10;
    private javax.swing.JLabel txtAISPair2;
    private javax.swing.JLabel txtAISPair3;
    private javax.swing.JLabel txtAISPair4;
    private javax.swing.JLabel txtAISPair5;
    private javax.swing.JLabel txtAISPair6;
    private javax.swing.JLabel txtAISPair7;
    private javax.swing.JLabel txtAISPair8;
    private javax.swing.JLabel txtAISPair9;
    private javax.swing.JTextField txtAISRuns;
    private javax.swing.JTextField txtAISSubsetR;
    private javax.swing.JTextField txtAISSubsetS;
    private javax.swing.JTextField txtAbsorption;
    private javax.swing.JTextField txtAttractiveness;
    private javax.swing.JTextField txtBSOGen;
    private javax.swing.JLabel txtBSOPair1;
    private javax.swing.JLabel txtBSOPair10;
    private javax.swing.JLabel txtBSOPair2;
    private javax.swing.JLabel txtBSOPair3;
    private javax.swing.JLabel txtBSOPair4;
    private javax.swing.JLabel txtBSOPair5;
    private javax.swing.JLabel txtBSOPair6;
    private javax.swing.JLabel txtBSOPair7;
    private javax.swing.JLabel txtBSOPair8;
    private javax.swing.JLabel txtBSOPair9;
    private javax.swing.JTextField txtBSORuns;
    private javax.swing.JLabel txtBSOprogress;
    private javax.swing.JTextField txtC1;
    private javax.swing.JTextField txtC2;
    private javax.swing.JTextField txtClusters;
    private javax.swing.JTextField txtCompareGens;
    private javax.swing.JTextField txtCompareRuns;
    private javax.swing.JLabel txtCompareText;
    private javax.swing.JLabel txtComputeFA;
    private javax.swing.JLabel txtCurrently;
    private javax.swing.JTextField txtEpochs;
    private javax.swing.JTextField txtErrorAcceptance;
    private javax.swing.JTextField txtFAAlpha;
    private javax.swing.JLabel txtFAPair1;
    private javax.swing.JLabel txtFAPair10;
    private javax.swing.JLabel txtFAPair2;
    private javax.swing.JLabel txtFAPair3;
    private javax.swing.JLabel txtFAPair4;
    private javax.swing.JLabel txtFAPair5;
    private javax.swing.JLabel txtFAPair6;
    private javax.swing.JLabel txtFAPair7;
    private javax.swing.JLabel txtFAPair8;
    private javax.swing.JLabel txtFAPair9;
    private javax.swing.JTextField txtGSAAlpha;
    private javax.swing.JLabel txtGSAComputing;
    private javax.swing.JTextField txtGSAEpsilon;
    private javax.swing.JTextField txtGSAGen;
    private javax.swing.JTextField txtGSAGravity;
    private javax.swing.JLabel txtGSAPair1;
    private javax.swing.JLabel txtGSAPair10;
    private javax.swing.JLabel txtGSAPair2;
    private javax.swing.JLabel txtGSAPair3;
    private javax.swing.JLabel txtGSAPair4;
    private javax.swing.JLabel txtGSAPair5;
    private javax.swing.JLabel txtGSAPair6;
    private javax.swing.JLabel txtGSAPair7;
    private javax.swing.JLabel txtGSAPair8;
    private javax.swing.JLabel txtGSAPair9;
    private javax.swing.JTextField txtGSARuns;
    private javax.swing.JTextField txtGenFA;
    private javax.swing.JTextField txtGenerations;
    private javax.swing.JTextField txtIGOAAlpha;
    private javax.swing.JLabel txtIGOAComputing;
    private javax.swing.JTextField txtIGOAEpsilon;
    private javax.swing.JTextField txtIGOAGen;
    private javax.swing.JTextField txtIGOAGravity;
    private javax.swing.JTextField txtIGOAPopB;
    private javax.swing.JTextField txtIGOAPopC;
    private javax.swing.JTextField txtIGOARuns;
    private javax.swing.JLabel txtIGSOPair1;
    private javax.swing.JLabel txtIGSOPair10;
    private javax.swing.JLabel txtIGSOPair2;
    private javax.swing.JLabel txtIGSOPair3;
    private javax.swing.JLabel txtIGSOPair4;
    private javax.swing.JLabel txtIGSOPair5;
    private javax.swing.JLabel txtIGSOPair6;
    private javax.swing.JLabel txtIGSOPair7;
    private javax.swing.JLabel txtIGSOPair8;
    private javax.swing.JLabel txtIGSOPair9;
    private javax.swing.JTextField txtLearningRate;
    private javax.swing.JTextField txtNNCrossOver;
    private javax.swing.JTextField txtNNGenerations;
    private javax.swing.JTextField txtNNMutation;
    private javax.swing.JTextField txtNoOfNeurons;
    private javax.swing.JLabel txtPSOCurrently;
    private javax.swing.JTextField txtPSOGenerations;
    private javax.swing.JLabel txtPSOPair1;
    private javax.swing.JLabel txtPSOPair10;
    private javax.swing.JLabel txtPSOPair2;
    private javax.swing.JLabel txtPSOPair3;
    private javax.swing.JLabel txtPSOPair4;
    private javax.swing.JLabel txtPSOPair5;
    private javax.swing.JLabel txtPSOPair6;
    private javax.swing.JLabel txtPSOPair7;
    private javax.swing.JLabel txtPSOPair8;
    private javax.swing.JLabel txtPSOPair9;
    private javax.swing.JTextField txtPSORuns;
    private javax.swing.JTextField txtRatio;
    private javax.swing.JTextField txtRuns;
    private javax.swing.JTextField txtRunsFA;
    private javax.swing.JLabel txtTable1Name;
    private javax.swing.JLabel txtTable2Name;
    // End of variables declaration//GEN-END:variables
}
